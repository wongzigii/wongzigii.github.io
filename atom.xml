<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silver Bullet</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wongzigii.github.io/"/>
  <updated>2019-05-31T03:35:18.329Z</updated>
  <id>http://wongzigii.github.io/</id>
  
  <author>
    <name>Zigii Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Commonly Confused Words in Swift</title>
    <link href="http://wongzigii.github.io/2018/05/28/Swift-Frameworks/"/>
    <id>http://wongzigii.github.io/2018/05/28/Swift-Frameworks/</id>
    <published>2018-05-28T13:56:42.000Z</published>
    <updated>2019-05-31T03:35:18.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><blockquote>
<p>一个 Packge 里面通常会包含源文件目录 Sources 以及一个单独的<a href="https://zh.wikipedia.org/wiki/%E6%B8%85%E5%8D%95%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">清单文件</a>  Manifest file。</p>
</blockquote>
<p>swift 自带 package 命令，因此可以用 <code>swift package init</code> 来快速初始化一个 Package。</p>
<p>初始化目录如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Souces</span></span><br><span class="line">    sourceA.swift</span><br><span class="line">    sourceB.swift</span><br><span class="line"><span class="type">Package</span>.swift</span><br></pre></td></tr></table></figure>
<p>其中 <code>Package.swift</code> 是我们上面提过的清单文件。清单文件主要用来定义或拓展一些规范。</p>
<p><a href="https://github.com/apple/swift-package-manager/blob/master/Documentation/PackageDescriptionV4.md#package-manifest-file-format-reference" target="_blank" rel="noopener">里面</a> 包含有很多属性，例如：</p>
<ul>
<li>name: The name of the package.</li>
<li>pkgConfig: Name of the pkg-config (.pc) file to get the additional flags for system modules.</li>
<li>providers: Defines hints to display for installing system modules.</li>
<li>products: The products vended by the package.</li>
<li>dependencies: The external package dependencies.</li>
<li>targets: The list of targets in the package.</li>
<li>swiftLanguageVersions: Specifies the set of supported Swift language versions.</li>
</ul>
<h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><h3 id="Linking-Library"><a href="#Linking-Library" class="headerlink" title="Linking Library"></a>Linking Library</h3><p>我们知道从源代码到可执行文件的过程需要通过几个步骤：</p>
<blockquote>
<p>源码 - 编译预处理 - 编译程序(*.s) - 优化程序 - 汇编程序(*.o) - 链接程序 - 可执行文件（*.out）</p>
</blockquote>
<p>其中链接部分实质是将很多需要的 <em>.o 文件链接起来，最后生成 </em>.out 可执行文件。</p>
<ul>
<li>Static linking 静态链接</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/8c7526ebgy1fsautl5jmfj20x60mc0tm.jpg" alt></p>
<p>首先，静态意味着源代码被编译后，会被<strong>全部</strong>塞进最终的二进制文件中，最后包体积会相对比较大，由于 library 包含的内容多，因此加载起来会比较慢。还有个问题就是，如果尝试链接两个相同的 library 会导致 symbol duplicate。你一定遇到过这种情况，就是有的时候在项目中创建了两个相同的文件，编译时就会报错。</p>
<ul>
<li>Dynamic linking 动态链接</li>
</ul>
<p>跟静态链接库相对的，是动态链接库。</p>
<p><img src="http://ww1.sinaimg.cn/large/8c7526ebgy1fsautl4sykj20x60kf0tu.jpg" alt></p>
<p>动态链接库只会在运行时加载，因此并不会因为合并到二进制文件中而导致包体积增加。</p>
<h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><blockquote>
<p>Framework 其实是一个包含很多东西的 <em>文件夹</em>，里面可以包括有：动态链接库，nib 文件，图片资源文件，本地化文件，头文件以及相关文档。</p>
</blockquote>
<p>如果你使用过 <a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a> ，那你一定见过 <code>/Carthage/Build/</code> 目录下的 xxx.Framework 文件。</p>
<p>Framework 按我个人的理解来说，其实更像是开发者开发好的框架，开发者已经（根据 Library）开发好接口，你去调用就好了。</p>
<p>我们经常使用的 UIKit，Foundation 等等都是 Framework，Framework 其中里面包含有图片素材等其他资源文件。</p>
<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><blockquote>
<p>Swift organizes code into modules. Each module specifies a namespace and enforces access controls on which parts of that code can be used outside of the module.</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Alamofire</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br></pre></td></tr></table></figure>
<p>我们首先要知道命名空间这个概念，在没有 Module 之前 （Objective-C），我们需要手动地用 #import 来 import framework，还要手动在 Xcode 里 链接 framework’s binary。编译时，有时候会由于两个 framework 里使用了相同的宏定义而导致冲突，因此你需要在宏前面加上你独特的前缀，如 <code>NS_MY_MACRONAME</code>。</p>
<p>而 Swift 里的命名空间是隐式的，所以当你调用 <code>NSLog</code> 函数的时候，实际上是 <code>Foundation.NSLog</code>。</p>
<p>举个例子，假设两个 modules，moduleA 和 moduleB 都有两个相同的函数，都叫 foo，这时候可以在函数前面添加 module 的命名空间来区分开来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleA</span><br><span class="line"><span class="keyword">import</span> moduleB</span><br><span class="line"></span><br><span class="line">moduleA.foo()</span><br><span class="line">moduleB.foo()</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Package&quot;&gt;&lt;a href=&quot;#Package&quot; class=&quot;headerlink&quot; title=&quot;Package&quot;&gt;&lt;/a&gt;Package&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个 Packge 里面通常会包含源文件目录 Sources 以及一个单独
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Mach-O File</title>
    <link href="http://wongzigii.github.io/2018/04/09/Mach-O-Files/"/>
    <id>http://wongzigii.github.io/2018/04/09/Mach-O-Files/</id>
    <published>2018-04-08T16:19:01.000Z</published>
    <updated>2019-05-30T04:49:21.464Z</updated>
    
    <content type="html"><![CDATA[<p>程序经过编译器编译，将源代码编译成 <code>.o</code> 文件，被动态链接器链接，打包成可执行文件或者静态库，最后被用户执行，这是代码到可执行文件再到被计算机运行的整个过程。</p>
<p>今天我想根据之前看过的文章还有对动态链接器的了解，记录一下关于动态链接器的一切。</p>
<h2 id="动态链接器"><a href="#动态链接器" class="headerlink" title="动态链接器"></a>动态链接器</h2><p>首先，我们上文提到的动态链接器 dynamic linker，你肯定见过它们在不同平台对应的链接文件，只是不知道它的名字而已。在 Microsoft Windows 系统，它叫 DLL (Dynamic link library)，在遵循 <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format" target="_blank" rel="noopener">ELF 可执行文件格式</a> 的 Unix 系统（不包括 Darwin），你会看到一个 <code>.so</code> （shared object） 拓展名的文件。在 macOS 和 iOS 系统，则有 <code>dylib</code> (dynamic library)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序经过编译器编译，将源代码编译成 &lt;code&gt;.o&lt;/code&gt; 文件，被动态链接器链接，打包成可执行文件或者静态库，最后被用户执行，这是代码到可执行文件再到被计算机运行的整个过程。&lt;/p&gt;
&lt;p&gt;今天我想根据之前看过的文章还有对动态链接器的了解，记录一下关于动态链接器的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RxObjCRuntime In RxSwift</title>
    <link href="http://wongzigii.github.io/2018/03/27/Rx-RxObjCRuntime/"/>
    <id>http://wongzigii.github.io/2018/03/27/Rx-RxObjCRuntime/</id>
    <published>2018-03-27T04:20:15.000Z</published>
    <updated>2019-05-30T10:00:01.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在使用 RxSwift 或者 RxCocoa 的过程，总是有疑惑，这个框架是怎么将 sentMessage 的方法传递出来给 Observer 监听的呢？其实不外乎通过 Method Swizzling 或者其他 KVO 之类的方法，在消息转发 hook 一层自己的逻辑。</p>
<p>怀着疑问，我今天想探究一下 RxCocoa 里面的 Runtime 机制，RxSwift 的方法监听 feature 源自这个 2015 年的 issue - <a href="https://github.com/ReactiveX/RxSwift/issues/181" target="_blank" rel="noopener">Is there any way to observe method calls? · Issue #181 · ReactiveX/RxSwift · GitHub</a>。</p>
<p>我们直接到 RxCocoa/Runtime/_RXObjCRuntime 这个文件看代码：</p>
<p>首先第一行代码是一个宏开关：</p>
<p><code>#if define !DISABLE_SWIZZLING</code></p>
<p>让你可以从全局控制是否开启 method swizzling.</p>
<p>接下来是另一个宏</p>
<p><code>#define HIDDEN_ARGUMENT_COUNT 2</code> </p>
<p>在 Objective-C 的消息里面，会自带两个隐藏的参数：</p>
<ul>
<li>id 类型的 self (这个很好理解吧，任意对象都可以发消息，id 泛指任意对象) </li>
<li>SEL 类型的 _cmd (其实就是方法名的选择器，你可以通过 NSStringFromSelector(_cmd) 取到方法名)。</li>
</ul>
<p>所以，其实 Objective-C 的方法就是最少自带两个参数的 C 函数。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>代码比较多，我主要选几个重要方法作为入口开始看：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the main entry point for observing messages sent to arbitrary objects.</span></span><br><span class="line">-(IMP __<span class="keyword">nullable</span>)ensurePrepared:(<span class="keyword">id</span> __<span class="keyword">nonnull</span>)target forObserving:(SEL __<span class="keyword">nonnull</span>)selector error:(<span class="built_in">NSErrorParam</span>)error</span><br></pre></td></tr></table></figure>
<p>ensurePrepared 这个方法从方法名字看是为了真正的 swizzling 做准备工作。</p>
<p>首先它通过 <code>class_getInstanceMethod</code> 拿到某个具体的方法，如果这个方法 Method 为空，则抛出一个 SelectorNotImplemented 的异常。<br>除此之外，还对一些敏感的方法名做了过滤，如：<code>class</code>，<code>forwardingTargetForSelector</code>，<code>methodSignatureForSelector</code> 及 <code>respondsToSelector</code> 等方法，如果你针对这些方法做 swizzling，就会抛一个 ObservingPerformanceSensitiveMessages 的异常。</p>
<p>接着往下走，如果这个 selector 是 dealloc 方法，原始的方法将会被 swizzled 掉。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// For `dealloc` message, original implementation will be swizzled.</span><br><span class="line">// This is a special case because observing `dealloc` message is performed when `observeWeakly` is used.</span><br><span class="line">//</span><br><span class="line">// Some toll free bridged classes don&apos;t handle `object_setClass` well and cause crashes.</span><br><span class="line">//</span><br><span class="line">// To make `deallocating` as robust as possible, original implementation will be replaced.</span><br><span class="line">if (selector == deallocSelector) &#123; </span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于 toll-free-bridged 我想多说几句：</p>
<ol>
<li>在 Objective-C 中，Foundation 和 CoreFoundation 之间类型是可以互相 toll-free-bridged 的。比如 NSString 和 CFStringRef，NSArray 和 CFArrayRef 等，他们之间其实是可以互相转换的。</li>
<li>在 Swift 中，由于 Swift 支持跨平台可以运行在 Linux 系统上，因此  Swift 上的类型 bridging 要比 Objective-C 更复杂。</li>
</ol>
<p>举个简单的例子，在 iOS/macOS 平台，将 Array 转换成 NSArray 非常简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let myArray: NSArray = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span><br></pre></td></tr></table></figure>
<p>而在 Linux 平台，你需要另外用 CoreFoundation 的 <a href="https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/Array.swift#L13" target="_blank" rel="noopener"><code>_bridgeToObjectiveC</code> 方法</a> 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let myArray: NSArray = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]._bridgeToObjectiveC()</span><br></pre></td></tr></table></figure>
<p>更多关于类型的 bridging 可以查看 <code>swift-corelibs-foundation/bridging.swift</code></p>
</blockquote>
<p>除了以上这几种方法之外，就是我们正常调用的方法了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class __nullable swizzlingImplementorClass = [self prepareTargetClassForObserving:target error:error];</span><br><span class="line">if (swizzlingImplementorClass == nil) &#123;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先确保这个类不为空，</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *methodEncoding = RX_method_encoding(instanceMethod);</span><br></pre></td></tr></table></figure>
<p>然后获取这个实例方法的 encode 类型，</p>
<p>这里定义了一个 <code>RXInterceptWithOptimizedObserver</code> 的变量，我们再细看，其实它是一个返回 Bool 类型的 Block，接受的参数就是我们上面判断的变量值，结合来看的话，就是能拿到这个方法的 method encoding 的话，就返回 true，反之为 false。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef BOOL (^RXInterceptWithOptimizedObserver)(RXObjCRuntime * __nonnull self, Class __nonnull class, SEL __nonnull selector, NSErrorParam error);</span><br></pre></td></tr></table></figure>
<p>接着通过 <code>RX_method_has_supported_return_type</code> 检查这个方法的返回类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (!RX_method_has_supported_return_type(instanceMethod)) &#123;</span><br><span class="line">    RX_THROW_ERROR([NSError errorWithDomain:RXObjCRuntimeErrorDomain</span><br><span class="line">                                       code:RXObjCRuntimeErrorObservingMessagesWithUnsupportedReturnType</span><br><span class="line">                                   userInfo:nil], nil);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static supported_type_t supported_types[] = &#123;</span><br><span class="line">    &#123; .encoding = @encode(void)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(id)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(Class)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(void (^)(void))&#125;,</span><br><span class="line">    &#123; .encoding = @encode(char)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(short)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(int)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(long)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(long long)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(unsigned char)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(unsigned short)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(unsigned int)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(unsigned long)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(unsigned long long)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(float)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(double)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(BOOL)&#125;,</span><br><span class="line">    &#123; .encoding = @encode(const char*)&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果方法返回的类型不包含在 supported_types 数组里的话就直接抛异常。</p>
<p>最后，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IMP interceptorIMPForSelector = [self interceptorImplementationForSelector:selector forClass:swizzlingImplementorClass];</span><br></pre></td></tr></table></figure>
<p><code>interceptorImplementationForSelector</code> 这个方法会接受上面经过层层检查的 <code>selector</code> 变量 和 <code>swizzlingImplementorClass</code> 变量，并返回一个对 selector 进行 swizzling 的 IMP。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>好了，ensurePrepared 方法看完了，接下来用 <kbd>CTRL</kbd>+<kbd>F</kbd> 搜索调用这个方法的地方，有且仅有一处 – <code>RX_ensure_observing(id __nonnull target, SEL __nonnull selector, NSErrorParam error)</code></p>
<p>一个叫 <code>RX_ensure_observing</code> 的方法，看来这个才是真正的入口。</p>
<p>这个方法很有意思，执行上面的 <code>interceptorImplementationForSelector</code> 方法前会进行加锁操作以确保原子性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@synchronized([target class]) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// The only other resource that all other swizzling libraries have in common without introducing external</span><br><span class="line">// dependencies is class object.</span><br><span class="line">//</span><br><span class="line">// It is polite to try to synchronize it in hope other unknown entities will also attempt to do so.</span><br><span class="line">// It&apos;s like trying to figure out how to communicate with aliens without actually communicating,</span><br><span class="line">// save for the fact that aliens are people, programmers, authors of swizzling libraries.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有时候，我们不知道是什么东西在对代码做了修改，就像你想找到与外星人沟通的方法一样，你不知道外星人到底是普通的正常人，一个程序员，还是那些写 swizzling library 的作者。</p>
</blockquote>
<p>所以应该是担心其他框架也对目标实现 swizzling 造成难以 debug 所以才这样做吧。</p>
<p>接着全文搜索找到只有 <code>NSObject+Rx</code> 这个文件里 <code>registerMessageInterceptor</code> 调用这个 <code>RX_ensure_observing</code> 方法，那就不难看出这个是用来拓展 RxSwift runtime 的特性。</p>
<p>我们熟悉的 <code>sentMessage</code>, <code>methodInvoked</code> 和 <code>deallocating</code> 均调用了 <code>registerMessageInterceptor</code>。</p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>总结一下，我们上面顺藤摸瓜地从 _RXObjCRuntime 这个文件通过注释找到一个貌似是入口的方法，其实这个文件里还有很多黑科技。</p>
<p>比如用 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL isThisTollFreeFoundationClass = CFGetTypeID((CFTypeRef)target) != defaultTypeID;</span><br></pre></td></tr></table></figure>
<p>来判断我上面提过的 toll-free-bridge，</p>
<p>还有它是怎么统计 <code>number_of_dynamic_subclasses</code>, <code>number_of_forwarding_enabled_classes</code>, <code>number_of_intercepting_classes</code>, <code>RX_number_of_forwarded_methods</code> 和 <code>RX_number_of_swizzled_methods</code> 等等。</p>
<p>总之，你会惊讶地发现 runtime 原来还可以这么玩。</p>
<p>最后，have fun with Rx!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;在使用 RxSwift 或者 RxCocoa 的过程，总是有疑惑，这个框架是怎么将 sentMessage 的方法传递出来给
    
    </summary>
    
    
      <category term="rxswift" scheme="http://wongzigii.github.io/tags/rxswift/"/>
    
  </entry>
  
  <entry>
    <title>&lt;译&gt; Understanding Buffer Overflows Attack</title>
    <link href="http://wongzigii.github.io/2018/02/22/Understanding-buffer-overflows-attack/"/>
    <id>http://wongzigii.github.io/2018/02/22/Understanding-buffer-overflows-attack/</id>
    <published>2018-02-22T13:01:35.000Z</published>
    <updated>2019-05-30T09:52:31.061Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://itandsecuritystuffs.wordpress.com/2014/03/18/understanding-buffer-overflows-attacks-part-1/" target="_blank" rel="noopener">原文地址</a></p>
<h2 id="内存的分布结构图"><a href="#内存的分布结构图" class="headerlink" title="内存的分布结构图"></a>内存的分布结构图</h2><p><img src="https://itandsecuritystuffs.files.wordpress.com/2014/03/image_thumb.png?w=415&amp;h=480&amp;zoom=2" alt></p>
<p>上图是 x86 架构的处理器的内存结构图，其中我们应用程序的代码，蓝色部分，被写在内存地址的最低位，而红色部分，栈地址则位于最高位，紫色部分，堆地址，位于内存中间位置。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>每个不同型号的处理器架构是不一样的。我们用的 x86 处理器和摩托罗拉，苹果手机的处理器架构也不一样。即使同样是 x86 处理器，不同处理器之间也区分 16bits，32bits 和 64bits 的寄存器。</p>
<p>在 x86-32bits 架构中，有以下 8 个通用的寄存器用来指向内存中的其他位置：</p>
<ul>
<li>EAX</li>
<li>EBX</li>
<li>ECX</li>
<li>EDX</li>
<li>ESI</li>
<li>EDI</li>
<li>ESP: Extended Stack Pointer - 栈指针，总是指向栈顶</li>
<li>EBP: Extended Base Stack Pointer - 也是栈指针，但是是指向栈的基地址</li>
</ul>
<p>我们集中讨论 ESP EBP 这几个比较重要的寄存器。（其实还有 EIP – Extended Instruction Pointer, 它是一个只读的寄存器，指向 CPU 下次要执行的地址。）</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一个先进后出的数据结构。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fun()</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"End"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考虑上面的代码，系统会帮我们将 EBP 入栈 (push EBP)，当函数调用结束后再将 EBP 出栈 (pop EBP)。其中会用到三种寄存器:</p>
<ul>
<li>EIP</li>
<li>ESP</li>
<li>EBP</li>
</ul>
<p>调用 fun 函数前：</p>
<ol>
<li>EIP 寄存器保存 CPU 下次要执行的指令的地址，就是执行完 fun 函数后要执行 printf 语句的地址</li>
<li>fun 函数调用前，EBP 寄存器保存着栈的栈底指针，这是由 ESP 传递给 EBP 的，此时 ESP 既是栈顶指针，也是栈底指针 （mov EBP, ESP）</li>
<li>调用过程中，ESP 寄存器始终指向栈顶</li>
</ol>
<p>调用 fun 函数后：</p>
<ol>
<li>EBP 寄存器保存着栈底指针，而这个地址是调用开始前 （mov EBP, ESP） 由 ESP 传递给 EBP 的，调用完之后，应该要把 EBP 地址回传给 ESP，因此 ESP 又一次指向栈顶的地址。</li>
<li>将之前入栈的 EBP 地址出栈 （pop EBP）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push EAX</span><br><span class="line">push byte[EBP+20]</span><br><span class="line">push 3     // 保存上下文环境</span><br><span class="line">call calc  // 正式调用 bar（）</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">calc: </span><br><span class="line">push EBP     // 将 EBP 地址入栈</span><br><span class="line">mov EBP, ESP // 将 ESP 地址赋给 EBP</span><br><span class="line">sub ESP, local size // 为 foo 分配内存地址</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">mov ESP, EBP // 将 EBP 地址赋给 ESP，free 本地的变量</span><br><span class="line">pop EBP      // 将 EBP 地址出栈</span><br><span class="line">ret param size // free 参数的内存并返回</span><br></pre></td></tr></table></figure>
<p><img src="https://itandsecuritystuffs.files.wordpress.com/2014/03/image_thumb1.png?w=555&amp;h=480&amp;zoom=2" alt></p>
<h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h2><p>说了那么多废话，究竟什么是缓存区溢出。</p>
<p>我们回顾一下函数调用的整个过程，</p>
<ol>
<li>创建函数调用的堆栈，EBP 作为栈基址</li>
<li>函数的参数通过 EBP+8，EBP+12 等等传入内存</li>
<li>函数被调用，函数结果被保存到 RET 指针指向的地址，即 EBP + 4</li>
</ol>
<p>假设我们在第二步的时候传了一个 12 个 <code>A</code> 的字符串参数进去这个函数，<br>现在我们的内存如下图，</p>
<p><img src="https://itandsecuritystuffs.files.wordpress.com/2014/03/image_thumb2.png?w=617&amp;h=480&amp;zoom=2" alt></p>
<p>现在，PARAM1 指向我们保存参数的地址，而我们传进去的 12 字节的参数，由于每块内存最多只能保存 4 字节，因此实际上这 12 字节在从低往高的内存地址中被拷贝进去。</p>
<p>那如果我们传进去一个非常非常大的，大到超出内存长度的参数呢？</p>
<p><img src="https://itandsecuritystuffs.files.wordpress.com/2014/03/image_thumb3.png?w=617&amp;h=480&amp;zoom=2" alt></p>
<p>这时候 EIP 寄存器原来的内容就会被覆盖掉，而函数调用后需要用到的 EIP 寄存器所保存的地址，用来执行下一步语句。系统无法知道下一步该怎么做，就会抛出异常。</p>
<blockquote>
<p>题外话：栈溢出 Stack Overflow 其实是缓冲区溢出 Buffer Overflow 的特殊情形，原因是缓冲区里面包含了堆地址，栈地址和其他内存地址。假设你递归调用一个使用栈地址的函数且没有返回的话，最后会导致栈溢出，而我们上面缓冲区溢出的例子，AAAA 字符串不仅把栈的地址用光了，还把堆和其他内存地址都用光了。</p>
</blockquote>
<h2 id="利用缓冲区溢出"><a href="#利用缓冲区溢出" class="headerlink" title="利用缓冲区溢出"></a>利用缓冲区溢出</h2><p>如果 EIP 被没用的脏数据覆盖掉，程序会崩溃并退出。如果 EIP 被 <em>别有用心</em> 的内容覆盖掉，那函数调用完之后会继续执行 <em>别有用心</em> 的代码块，通过这样，你就能利用缓冲区溢出来干一点有趣的事情。</p>
<p>但是，要想利用缓冲区溢出，还有几点需要注意：</p>
<ol>
<li>你不知道 EIP 的确切地址在哪里，从而导致你无法改写 EIP 地址的内容</li>
<li>你改写的地址需要是 ESP 指向<em>过</em>的地址，而 ESP 的地址总是在不停地改变，因此当缓冲区溢出的时候，你需要知道 ESP 的地址才行</li>
<li>每个内存地址都有一些没用的十六进制值，像回车字符 0x0a, 换行字符 0x0d 等等，如果 ESP 地址保存着这些没用的地址，那么程序会直接崩溃掉了</li>
</ol>
<p>如何解决这几个问题，我们逐个问题看：</p>
<ol>
<li>你需要找到一个可以复现缓冲区溢出的特殊字符串如 （ABCD），当你将整串完整的字符串（PPPPABCDMMMM）传进去后，EIP 的内容会被这个特殊字符串覆盖，这时候你可以通过 ABCD 在PPPPABCDMMMM 字符串的偏移量，找到实际能被利用的 EIP 地址。</li>
<li>有两种办法，第一种是借助一些反编译工具 (Ollydbg, IDAPro, Immunity,等等)，在执行的时候定位 ESP 的值，另一种办法是用程序分析软件 Immunity Debugger 或者 pydbg 来分析程序抛出的异常。</li>
<li>我们可以往里面传一个包含从 0x00 到 0xFF 的测试字符串，并用我们第二个办法，借助一些程序分析工具，判断导致崩溃的字符串是哪一个，并一直重复下去，直到整个测试字符串能通过测试，并不再引起崩溃。</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我们可以通过一些脚本或者应用 <a href="https://github.com/shellphish/fuzzer" target="_blank" rel="noopener">fuzzers</a> 为我们开发的应用<em>输入</em>很多没有用的字符串，以测试是否会崩溃。这里的输入泛指很多东西：包括但不限于，文本输入框的内容，配置文件，上传文件的接口或者应用的进程等等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://itandsecuritystuffs.wordpress.com/2014/03/18/understanding-buffer-overflows-attacks-part-1/&quot; target=&quot;_blank&quot; rel=&quot;noopen
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;译&gt; Some mistakes in RxSwift you want to avoid</title>
    <link href="http://wongzigii.github.io/2017/11/24/Some-mistakes-in-RxSwift-you-want-to-avoid/"/>
    <id>http://wongzigii.github.io/2017/11/24/Some-mistakes-in-RxSwift-you-want-to-avoid/</id>
    <published>2017-11-24T07:25:51.000Z</published>
    <updated>2019-05-30T04:07:13.520Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://adamborek.com/top-7-rxswift-mistakes/" target="_blank" rel="noopener">原文地址</a></p>
<a id="more"></a>
<h2 id="0x01-combineLatest-vs-withLatestFrom"><a href="#0x01-combineLatest-vs-withLatestFrom" class="headerlink" title="0x01 combineLatest vs withLatestFrom"></a>0x01 combineLatest vs withLatestFrom</h2><p>Observable 通常情况下是 lazy 的。意思是它在被订阅前不做任何事情的。有时候你会像下面这样用 Observable 包装一层：</p>
<script src="https://gist.github.com/TheAdamBorek/7d9f1d24c1ce5e5a257a13f17e5bc8ff.js"></script>

<p>你可以用 <code>just</code> 直接将某一个值包装成 Observable。但是如果这个值需要大量复杂计算呢？你可以用 <code>deferred</code> 来将这个值的计算推迟到当有新订阅者订阅的时候。</p>
<script src="https://gist.github.com/TheAdamBorek/6eca215185c0c269682f8d1f68e35d55.js"></script>

<p>还有像 <code>create</code>, <code>just</code> </p>
<h2 id="0x02-Observable-should-be-lazy"><a href="#0x02-Observable-should-be-lazy" class="headerlink" title="0x02 Observable should be lazy"></a>0x02 Observable should be lazy</h2><h2 id="0x03-Using-wrong-DisposeBag"><a href="#0x03-Using-wrong-DisposeBag" class="headerlink" title="0x03 Using wrong DisposeBag"></a>0x03 Using wrong DisposeBag</h2><h2 id="0x04-Not-using-drivers-on-UI"><a href="#0x04-Not-using-drivers-on-UI" class="headerlink" title="0x04 Not using drivers on UI"></a>0x04 Not using drivers on UI</h2><h2 id="0x05-Error-handling"><a href="#0x05-Error-handling" class="headerlink" title="0x05 Error handling"></a>0x05 Error handling</h2><h2 id="0x06-Subscribing-multiple-times-into-1-Observable"><a href="#0x06-Subscribing-multiple-times-into-1-Observable" class="headerlink" title="0x06 Subscribing multiple times into 1 Observable"></a>0x06 Subscribing multiple times into 1 Observable</h2><h2 id="0x07-Overusing-subjects-amp-variables"><a href="#0x07-Overusing-subjects-amp-variables" class="headerlink" title="0x07 Overusing subjects &amp; variables"></a>0x07 Overusing subjects &amp; variables</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://adamborek.com/top-7-rxswift-mistakes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;译&gt; Optimizing Swift build times</title>
    <link href="http://wongzigii.github.io/2017/10/24/Optimizing-Swift-Build-Times/"/>
    <id>http://wongzigii.github.io/2017/10/24/Optimizing-Swift-Build-Times/</id>
    <published>2017-10-24T09:40:22.000Z</published>
    <updated>2019-05-30T04:07:13.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/fastred/Optimizing-Swift-Build-Times" target="_blank" rel="noopener">原文地址</a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>函数和表达式的类型检查</li>
<li>关注那些编译很慢的文件</li>
<li>只构建你需要的架构</li>
<li>dSYM 的生成</li>
<li>编译器优化等级</li>
<li>第三方依赖</li>
<li>模块化</li>
<li>关于 XIBs 文件</li>
<li>Xcode Schemes</li>
<li>使用新的 Xcode 编译系统</li>
<li>启用 Swift 的 Concurrent Swift Build Tasks</li>
<li>在 Xcode 查看你的编译时间</li>
</ul>
<h2 id="函数和表达式的类型检查"><a href="#函数和表达式的类型检查" class="headerlink" title="函数和表达式的类型检查"></a>函数和表达式的类型检查</h2><p>Swift 的构建时间如此之长主要的原因是因为需要做复杂的类型检查。Xcode 默认不会告诉你哪些代码需要很长时间来编译。你可以通过在 build settings 中的 <code>Other Swift Flags</code> 添加以下参数来查看：</p>
<ul>
<li><code>-Xfrontend -warn-long-function-bodies=100</code> （100 指 100ms，你也可以根据需要调整这个值）</li>
<li><code>-Xfrontend -warn-long-expression-type-checking=100</code></li>
</ul>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/times@2x.png" alt></p>
<p>现在，重新构建你的项目，然后你就会看见像这样的错误警告：</p>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/xcode-warning@2x.png" alt></p>
<p>下一步就是如何定位那些编译很慢的代码。<a href="https://www.swiftbysundell.com/posts/improving-swift-compile-times" target="_blank" rel="noopener">John Sundell</a> 和 <a href="https://medium.com/@RobertGummesson/regarding-swift-build-time-optimizations-fc92cdd91e31" target="_blank" rel="noopener">Robert Gummesson</a> 的文章可以帮上你的忙。</p>
<p>更多资源：</p>
<ul>
<li><a href="http://khanlou.com/2016/12/guarding-against-long-compiles/" target="_blank" rel="noopener">Guarding Against Long Compiles</a></li>
<li><a href="https://www.jessesquires.com/blog/measuring-compile-times-xcode9/" target="_blank" rel="noopener">Measuring Swift compile times in Xcode 9 · Jesse Squires</a></li>
<li><a href="https://www.swiftbysundell.com/posts/improving-swift-compile-times" target="_blank" rel="noopener">Improving Swift compile times — Swift by Sundell</a></li>
<li><a href="https://medium.com/swift-programming/swift-build-time-optimizations-part-2-37b0a7514cbe" target="_blank" rel="noopener">Swift build time optimizations — Part 2</a></li>
</ul>
<h2 id="关注那些编译很慢的文件"><a href="#关注那些编译很慢的文件" class="headerlink" title="关注那些编译很慢的文件"></a>关注那些编译很慢的文件</h2><p>上一章介绍了如何在函数及表达式层面改善编译时间，但有时候你也想知道某一个单独文件的总编译时间是多少。</p>
<p>现在，打开命令行，通过以下命令来收集项目文件的编译时间：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -destination <span class="string">'platform=iOS Simulator,name=iPhone 8'</span> \</span><br><span class="line">  -sdk iphonesimulator -project YourProject.xcodeproj \</span><br><span class="line">  -scheme YourScheme -configuration Debug \</span><br><span class="line">  clean build \</span><br><span class="line">  OTHER_SWIFT_FLAGS=<span class="string">"-driver-time-compilation \</span></span><br><span class="line"><span class="string">    -Xfrontend -debug-time-function-bodies \</span></span><br><span class="line"><span class="string">    -Xfrontend -debug-time-compilation"</span> | \</span><br><span class="line">tee profile.log</span><br></pre></td></tr></table></figure>
<p>(如果你使用的是 workspace，请自行把 <code>-project YourProject.xcodeproj</code> 替换成 <code>-workspace YourProject.xcworkspace</code>)</p>
<p>然后我们就可以把有用的编译时间信息提取出来：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2.7288 (  0.3%)  &#123;compile: Account.o &lt;= Account.swift &#125;</span><br><span class="line">2.7221 (  0.3%)  &#123;compile: MessageTag.o &lt;= MessageTag.swift &#125;</span><br><span class="line">2.7089 (  0.3%)  &#123;compile: EdgeShadowLayer.o &lt;= EdgeShadowLayer.swift &#125;</span><br><span class="line">2.4605 (  0.3%)  &#123;compile: SlideInPresentationAnimator.o &lt;= SlideInPresentationAnimator.swift &#125;</span><br></pre></td></tr></table></figure>
<p>更多资源：</p>
<ul>
<li><a href="https://koke.me/2017/03/24/diving-into-swift-compiler-performance/" target="_blank" rel="noopener">Diving into Swift compiler performance</a></li>
</ul>
<h2 id="只构建你需要的架构"><a href="#只构建你需要的架构" class="headerlink" title="只构建你需要的架构"></a>只构建你需要的架构</h2><p>Xcode 默认会帮你设置好这个编译器参数，但是你应该检查一下以确保万无一失。你的项目在 Debug 模式下应该只构建那些需要的架构。</p>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/active-arch@2x.png" alt></p>
<p>更多资源：</p>
<ul>
<li><a href="http://samwize.com/2015/01/14/what-is-build-active-architecture-only/" target="_blank" rel="noopener">What is Build Active Architecture Only</a></li>
</ul>
<h2 id="dSYM-的生成"><a href="#dSYM-的生成" class="headerlink" title="dSYM 的生成"></a>dSYM 的生成</h2><p>在新的项目中，dSYM 文件默认不会在 Debug 模式下自动生成。但是，我们有的时候需要在真机调试中生成这个文件来分析程序的崩溃和闪退原因。</p>
<p>因此，推荐设置如下：</p>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/dsym@2x.png" alt></p>
<p>更多资源：</p>
<ul>
<li><a href="http://holko.pl/2016/10/18/dsym-debug/" target="_blank" rel="noopener">Speeding up Development Build Times With Conditional dSYM Generation</a></li>
</ul>
<h2 id="编译器优化等级"><a href="#编译器优化等级" class="headerlink" title="编译器优化等级"></a>编译器优化等级</h2><p>另一个常见的技巧是：</p>
<ul>
<li>Debug 模式下，将 <code>Optimization Level</code> 设置成 <code>Fast, Whole Module Optimization</code></li>
<li>只在 Debug 模式下，在 <code>Other Swift Flags</code> 中添加 <code>-Onone</code></li>
</ul>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/wmo_9@2x.png" alt></p>
<p>这样能使编译器：</p>
<blockquote>
<p>It runs one compiler job with all source files in a module instead of one job per source file</p>
<p>Less parallelism but also less duplicated work</p>
<p>It’s a bug that it’s faster; we need to do less duplicated work. Improving this is a goal going forward</p>
</blockquote>
<p>更多资源：</p>
<ul>
<li><a href="http://developear.com/blog/2016/12/30/Speed-Swift-Compilation.html" target="_blank" rel="noopener">Developear - Speeding Up Compile Times of Swift Projects</a></li>
<li><a href="https://twitter.com/slava_pestov/status/911747257103302656" target="_blank" rel="noopener">Slava Pestov on Twitter: “@iamkevb It runs one compiler job with all source files in a module instead of one job per source file”</a></li>
</ul>
<h3 id="对使用-CocoaPods-的编译器优化"><a href="#对使用-CocoaPods-的编译器优化" class="headerlink" title="对使用 CocoaPods 的编译器优化"></a>对使用 CocoaPods 的编译器优化</h3><p>如果你的项目使用 CocoaPods，你也该考虑把 Pod 项目的编译器优化打开。你可以通过在 <code>Podfile</code>  文件中添加一个 <code>post_install</code> 的 hook 来实现：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> <span class="params">|installer|</span></span><br><span class="line">  installer.pods_project.targets.each <span class="keyword">do</span> <span class="params">|target|</span></span><br><span class="line">    target.build_configurations.each <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">      <span class="keyword">if</span> config.name == <span class="string">'Debug'</span></span><br><span class="line">        config.build_settings[<span class="string">'OTHER_SWIFT_FLAGS'</span>] = [<span class="string">'$(inherited)'</span>, <span class="string">'-Onone'</span>]</span><br><span class="line">        config.build_settings[<span class="string">'SWIFT_OPTIMIZATION_LEVEL'</span>] = <span class="string">'-Owholemodule'</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>然后运行 <code>$ pod install</code>。别忘了对比一下添加这个 hook 前后的编译速度，来确认这个是否有效。</p>
<h2 id="第三方依赖"><a href="#第三方依赖" class="headerlink" title="第三方依赖"></a>第三方依赖</h2><p>现在有两种方式可以对项目安装第三方依赖：</p>
<p>1.源代码方式，当你 clean build 的时候，第三方依赖的源代码也会被重新编译一次。（例如：CocoaPods, git submodules, copy-pasted code, internal libraries in subprojects that the app target depends on）<br>2.预构建好的 framework 或者 library （例如：Carthage, static library distributed by a vendor that doesn’t want to provide the source code）</p>
<p>CocoaPods 作为 iOS 开发中最著名的依赖管理器，会在你每次 clean build 的时候将第三方依赖的源代码重新编译一次，从而使项目的编译时间更长。通常情况下，你不会经常地 clean build 项目。但实际情况是：你经常地不得不需要 clean build。（如需要切换分支，或者由于 Xcode 的 bugs 或其他奇怪的原因）</p>
<p>尽管 Carthage 比 CocoaPods 更加难用，但是它确实能加快项目的编译速度。因为 Carthage 的操作大多数都是修改声明依赖的文件 Podfile，（如添加或删除一个依赖，或者将依赖更新到一个新版本）。这些操作可能需要 5-15 分钟来完成，但是你进行这些操作的频率远远比 CocoaPods 重新把源代码编译一遍要少得多。</p>
<p>更多资源：</p>
<ul>
<li>time spent waiting for Xcode to finish builds</li>
</ul>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>Swift 的 Incremental compilation 并不是很完美。有时也许仅仅是修改了一个字符串，就会导致整个项目重新编译。</p>
<p>为了避免这个问题，你可以考虑将 app 拆分为几个模块。这里有 2 种方案：动态库和静态库（Xcode 9 Beta4 版本开始支持 Swift 静态库）。</p>
<p>假设你的 app 依赖一个叫做 <code>DatabaseKit</code> 的内部 framework。这种方法能够保证在你对 app 项目做了一些修改时，<code>DatabaseKit</code> 不会因为 <code>Incremental compilation</code> 而重新编译。</p>
<p>更多资源：</p>
<ul>
<li><a href="https://developer.apple.com/library/content/technotes/tn2435/_index.html" target="_blank" rel="noopener">Technical Note TN2435 – Embedding Frameworks In An App</a></li>
<li><a href="https://github.com/microfeatures/guidelines" target="_blank" rel="noopener">uFeatures</a></li>
</ul>
<h2 id="XIBs"><a href="#XIBs" class="headerlink" title="XIBs"></a>XIBs</h2><p>XIBs/storyboards 和 纯代码之间的抉择一直是一个热门的讨论话题，我们在这里不再过多地讨论。但是，有趣的是，如果你修改了 Interface Builder 里面的内容，只有那个修改的文件会被重新编译（成 NIB 格式），另外，如果你在 UIView 的某个子类里修改一个公开的方法，Swift 编译器可能会把继承自这个类的所有类都重新编译。</p>
<p>更多资源：</p>
<ul>
<li><a href="https://twitter.com/MichalCiuba/status/925326831074643968" target="_blank" rel="noopener">(…) in a large project incremental build is much faster if only a .xib was changed (vs. only a line of Swift UI code)</a></li>
</ul>
<h2 id="Xcode-Schemes"><a href="#Xcode-Schemes" class="headerlink" title="Xcode Schemes"></a>Xcode Schemes</h2><p>假设我们有一个项目，里面包含有 3 个 targets：</p>
<ul>
<li><code>App</code></li>
<li><code>AppTests</code></li>
<li><code>AppUITests</code> </li>
</ul>
<p>尽管我们可以正常工作，但我们还是可以优化一下 scheme 的配置。下面的配置是默认的，里面包含 3 个 scheme:</p>
<h3 id="App"><a href="#App" class="headerlink" title="App"></a>App</h3><p>用 <code>⌘+B</code> 构建这个应用只会跑单元测试，而不会跑 UI 测试。这对于 <code>short iterations</code> 很有用，（译者注：<code>short iterations</code> 应该是指快速迭代的版本，即只改变 UI，而不改变基本功能逻辑），如那些 UI 代码，只有需要的代码被编译了。</p>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/app-scheme@2x.png" alt></p>
<h3 id="App-单元测试（App-Unit-Test-Flow）"><a href="#App-单元测试（App-Unit-Test-Flow）" class="headerlink" title="App - 单元测试（App - Unit Test Flow）"></a>App - 单元测试（App - Unit Test Flow）</h3><p>Builds 命令不止会编译 app，还包括单元测试。Runs 命令只会跑单元测试。因为你在 build 的时候马上就能找到单元测试中的错误，而不是在运行时，因此，对于修改有单元测试的代码时，这会提高效率。</p>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/app-unit-test-flow@2x.png" alt></p>
<h3 id="App-全部测试"><a href="#App-全部测试" class="headerlink" title="App - 全部测试"></a>App - 全部测试</h3><p>Builds 命令会把所有单元测试 target 编译一遍。Runs 命令会跑单元测试和 UI 测试。当涉及到那些和 UI 关系紧密包含 UI 测试的代码时作用较大。</p>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/app-all-tests-flow@2x.png" alt></p>
<p>更多资源：</p>
<ul>
<li><a href="http://pilky.me/17/" target="_blank" rel="noopener">All About Schemes</a></li>
</ul>
<h2 id="使用新的-Xcode-编译系统"><a href="#使用新的-Xcode-编译系统" class="headerlink" title="使用新的 Xcode 编译系统"></a>使用新的 Xcode 编译系统</h2><p>在最新的 Xcode 9 中，<a href="https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Chapters/Introduction.html#//apple_ref/doc/uid/TP40001051-CH1-SW878" target="_blank" rel="noopener">有一个全新的构建系统</a>。这是一个预览版，并且默认没有开启，它会明显地减少项目的编译时间。如果要启用他，要从 Xcode 的菜单进入 <code>Workspace</code> 或 <code>Project Settings</code> 页面，就可以切换到新的编译系统。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/12/25/1608bbde531e79a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<p>更多资源：</p>
<ul>
<li><a href="https://github.com/quellish/XcodeNewBuildSystem" target="_blank" rel="noopener">Faster Swift Builds with the New Xcode Build System</a></li>
</ul>
<h2 id="启用-Swift-的-Concurrent-Swift-Build-Tasks"><a href="#启用-Swift-的-Concurrent-Swift-Build-Tasks" class="headerlink" title="启用 Swift 的 Concurrent Swift Build Tasks"></a>启用 Swift 的 Concurrent Swift Build Tasks</h2><p>Xcode 9.2 版本加入了一个对 Swift 项目的 <code>concurrent build tasks</code> 实验性支持。对于一些项目，可以大大减少编译器编译时间。另外值得注意的是，如果你启用这个特性，Xcode 会增加内存的开销。</p>
<p>如果要启用这个特性，退出 Xcode，然后在 Terminal 窗口输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$defaults</span> write com.apple.dt.Xcode BuildSystemScheduleInherentlyParallelCommandsExclusively -bool YES</span><br></pre></td></tr></table></figure>
<p>现在，测试一下项目的编译时间是否减少了。如果你要禁用这个特性，只需要把上面的 <code>YES</code> 改成 <code>NO</code> 再执行一次即可。</p>
<h2 id="在-Xcode-显示编译时间"><a href="#在-Xcode-显示编译时间" class="headerlink" title="在 Xcode 显示编译时间"></a>在 Xcode 显示编译时间</h2><p>最后，如果你想知道项目的编译时间是否在减少，你应该通过以下命令来打开：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES</span><br></pre></td></tr></table></figure>
<p>重新编译一次项目，现在你会看到整个项目的编译总时间：</p>
<p><img src="https://github.com/fastred/Optimizing-Swift-Build-Times/raw/master/assets/time@2x.png" alt></p>
<p>建议比较一下相同条件下的编译时间，如：</p>
<ol>
<li>退出 Xcode</li>
<li>清理 Derived Data (<code>$ rm -rf ~/Library/Developer/Xcode/DerivedData</code>).</li>
<li>用 Xcode 打开你的项目</li>
<li>立刻 build 你的项目，或者等 indexing 工作完成后再 build</li>
</ol>
<p>另外，你也可以通过命令行统计编译时间： </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time xcodebuild other params</span><br></pre></td></tr></table></figure>
<p>更多资源：</p>
<ul>
<li><a href="https://stackoverflow.com/a/2801156/1990236" target="_blank" rel="noopener">How to enable build timing in Xcode? - Stack Overflow</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/fastred/Optimizing-Swift-Build-Times&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VPS</title>
    <link href="http://wongzigii.github.io/2017/03/14/VPS/"/>
    <id>http://wongzigii.github.io/2017/03/14/VPS/</id>
    <published>2017-03-14T14:21:30.000Z</published>
    <updated>2019-05-30T04:07:13.522Z</updated>
    
    <content type="html"><![CDATA[<p>搬瓦工搞了个 19刀 一年的良心活动，而且竟然支持支付宝付款。</p>
<ol>
<li>Vim 中文乱码</li>
<li>SSH Key</li>
<li>Shadowsocks</li>
<li>Supervisor</li>
<li>MySQL 远程连接问题</li>
<li>自建 Git 仓库 及 git-hook 自动部署</li>
<li>Nginx</li>
</ol>
<h2 id="Vim-中文乱码"><a href="#Vim-中文乱码" class="headerlink" title="Vim 中文乱码"></a>Vim 中文乱码</h2><p>在 <code>/etc/vim/vimrc</code> 这个配置文件中添加文件编码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> fileencodings=utf-8,gb2312,gbk,gb18030</span><br><span class="line"><span class="built_in">set</span> termencoding=utf-8</span><br><span class="line"><span class="built_in">set</span> encoding=prc</span><br></pre></td></tr></table></figure>
<h2 id="SSH-Key"><a href="#SSH-Key" class="headerlink" title="SSH Key"></a>SSH Key</h2><p>首先，先本地生成一个新的 SSH key 用来连接到远程服务器，然后加到服务器上 <code>.ssh/authorized_keys</code> 文件中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub | ssh &lt;user&gt;@&lt;hostname&gt; <span class="string">'umask 0077; mkdir -p .ssh; cat &gt;&gt; .ssh/authorized_keys &amp;&amp; echo "Key copied"'</span></span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-t: 加密算法：RSA 、RSA1、DSA、ECDSA、ED25519</li>
<li>-b: 多少位：4096</li>
<li>-C: 注释</li>
</ul>
<p>更安全的做法：</p>
<ul>
<li>定期更换 SSH 端口</li>
<li>禁用密码登录，本地配置好 ssh_config 文件</li>
<li>特定 IP 加白名单</li>
<li>用 <a href="https://github.com/fail2ban/fail2ban" target="_blank" rel="noopener">fail2ban</a> 来 ban 掉一些尝试登录的爬虫</li>
</ul>
<h2 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h2><p>自建一个 bare git 仓库用来管理项目，并用 git hook 来自动部署。</p>
<h2 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h2><p>自然少不了用 Supervisor 这个守护进程来管理和监控进程，有几个命令很容易搞混乱：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 启动一个进程</span><br><span class="line">supervisorctl start &lt;name&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 重启 supervisor 但不会改变配置，它会停止并重新启动所有进程</span><br><span class="line">service supervisor restart</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 重启 &lt;name&gt; 进程，但不会改变配置</span><br><span class="line">supervisorctl restart &lt;name&gt;</span><br></pre></td></tr></table></figure>
<p>注意：如果你改了 supervisor 的配置，那么上面的命令都不会对最新的配置生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 将最新的配置应用到所有（通过重启）进程</span><br><span class="line">service supervisor stop</span><br><span class="line">service superviosr start</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 或者，你可以用 reread 来更新配置，注意：仅仅是更新，并没有重启相关进程</span><br><span class="line">supervisorctl reread</span><br><span class="line"></span><br><span class="line">// reread 通常需要跟 update 一起使用，将所有更新了配置的进程重启</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a><a href="http://markjberger.com/flask-with-virtualenv-uwsgi-nginx/" target="_blank" rel="noopener">Nginx</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搬瓦工搞了个 19刀 一年的良心活动，而且竟然支持支付宝付款。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vim 中文乱码&lt;/li&gt;
&lt;li&gt;SSH Key&lt;/li&gt;
&lt;li&gt;Shadowsocks&lt;/li&gt;
&lt;li&gt;Supervisor&lt;/li&gt;
&lt;li&gt;MySQL 远程连接问题&lt;/li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Lost Art of C Structure Packing</title>
    <link href="http://wongzigii.github.io/2016/11/13/The-Lost-Art-of-C-Structure-Packing/"/>
    <id>http://wongzigii.github.io/2016/11/13/The-Lost-Art-of-C-Structure-Packing/</id>
    <published>2016-11-13T12:25:22.000Z</published>
    <updated>2019-05-30T04:07:13.520Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.catb.org/esr/structure-packing" target="_blank" rel="noopener">原文地址</a></p>
<p><a href="https://github.com/ludx/The-Lost-Art-of-C-Structure-Packing" target="_blank" rel="noopener">已经有人把它翻译成中文版本了</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.catb.org/esr/structure-packing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ludx/The-L
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>What&#39;s New in Swift 3</title>
    <link href="http://wongzigii.github.io/2016/09/14/What-s-new-in-Swift-3/"/>
    <id>http://wongzigii.github.io/2016/09/14/What-s-new-in-Swift-3/</id>
    <published>2016-09-14T08:50:54.000Z</published>
    <updated>2019-05-30T10:21:28.987Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://realm.io/news/swiftcasts-daniel-steinberg-whats-new-in-swift-3-part-2/" target="_blank" rel="noopener">原文地址</a></p>
<h2 id="SE-0002-Removing-currying-function-declaration-syntax"><a href="#SE-0002-Removing-currying-function-declaration-syntax" class="headerlink" title="SE-0002: Removing currying function declaration syntax"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md" target="_blank" rel="noopener">SE-0002</a>: Removing <a href="https://en.wikipedia.org/wiki/Currying" target="_blank" rel="noopener">currying</a> function declaration syntax</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Before:</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">curried</span><span class="params">(x: Int)</span></span>(y: <span class="type">String</span>) -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Float</span>(x) + <span class="type">Float</span>(y)!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Swift 3 之前定义柯里化函数需要使用两个括号，好消息是现在可以这样写了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//After</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">curried</span><span class="params">(x: Int)</span></span> -&gt; (<span class="type">String</span>) -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;(y: <span class="type">String</span>) -&gt; <span class="type">Float</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">Float</span>(x) + <span class="type">Float</span>(y)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数变得更加直观：传入一个 <code>Int</code> 类型的 x，并返回一个接受 <code>String</code> 类型并返回 <code>Float</code> 类型的函数。</p>
<h2 id="SE-0042-Flattening-the-function-type-of-unapplied-method-references"><a href="#SE-0042-Flattening-the-function-type-of-unapplied-method-references" class="headerlink" title="SE-0042: Flattening the function type of unapplied method references"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md" target="_blank" rel="noopener">SE-0042</a>: Flattening the function type of unapplied method references</h2><p>假设我们有一个叫 Type 的 <code>struct</code> 类型，其中包含 instanceMethod 方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">instanceMethod</span><span class="params">(y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对 instanceMethod 进行赋值时，会显示 f 的类型为 <code>(Type) -&gt; (Int) -&gt; Int</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="type">Type</span>.instanceMethod  <span class="comment">//(Type) -&gt; (Int) -&gt; Int</span></span><br></pre></td></tr></table></figure>
<p>对应的调用方式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="type">Type</span>(x: <span class="number">1</span>))(<span class="number">2</span>) <span class="comment">// ==&gt; 3</span></span><br></pre></td></tr></table></figure>
<p>这个提案将 f 的类型 <code>(Type) -&gt; (Int) -&gt; Int</code> flatten 成了 <code>(Type, y: Int) -&gt; Int</code>，这样 f 的调用语法更像一个标准的 <code>func</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="type">Type</span>.instanceMethod  <span class="comment">// f: (Type, y: Int) -&gt; Int</span></span><br><span class="line">f(<span class="type">Type</span>(x: <span class="number">1</span>), y: <span class="number">2</span>)          <span class="comment">// ==&gt; 3</span></span><br></pre></td></tr></table></figure>
<h2 id="SE-0049-Move-noescape-and-autoclosure-to-be-type-attributes"><a href="#SE-0049-Move-noescape-and-autoclosure-to-be-type-attributes" class="headerlink" title="SE-0049: Move @noescape and @autoclosure to be type attributes"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0049-noescape-autoclosure-type-attrs.md" target="_blank" rel="noopener">SE-0049</a>: Move @noescape and @autoclosure to be type attributes</h2><p>假设现在有一个叫 <code>f2</code> 的 <code>func</code>，接受一个带有 <code>@autoclosure</code> 关键字的参数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(@autoclosure a : <span class="params">()</span></span></span> -&gt; ()) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>可以这样调用 <code>f2</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f2(<span class="built_in">print</span>(<span class="string">"hello”))</span></span><br></pre></td></tr></table></figure>
<p>或者将这个 <code>f2</code> 赋值给 <code>x</code>（注：函数是 Swift 中的一等公民，这里 <code>x</code> 的类型是 <code>(@autoclosure () -&gt; ()) -&gt; ()</code>）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = f2</span><br><span class="line">x(<span class="built_in">print</span>(<span class="string">"hello"</span>))</span><br></pre></td></tr></table></figure>
<p>但如果你强制将 <code>x</code> 定义为其他类型时，编译器会报错：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y : <span class="type">Int</span> = x </span><br><span class="line"><span class="comment">// error: cannot convert value of type '(@autoclosure () -&gt; ()) -&gt; ()' to specified type 'Int'</span></span><br></pre></td></tr></table></figure>
<p>但是奇怪的是，如果你显式地定义一个变量的类型，编译器会报错：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x2 : (<span class="meta">@autoclosure</span> () -&gt; ()) -&gt; () = f2</span><br><span class="line"><span class="comment">// error: attribute can only be applied to declarations, not types</span></span><br></pre></td></tr></table></figure>
<p>对比上面 <code>x</code> 和 <code>x2</code>，编译器的行为自相矛盾了。</p>
<p>因此，这个提案将原本用于定义参数的 <code>@noescape</code> 和 <code>@autoclosure</code> 关键字改为定义类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(@noescape fn : <span class="params">()</span></span></span> -&gt; ()) &#123;&#125;  <span class="comment">// declaration attribute</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// After</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(fn : @noescape <span class="params">()</span></span></span> -&gt; ()) &#123;&#125;  <span class="comment">// type attribute</span></span><br></pre></td></tr></table></figure>
<h2 id="SE-0035-Limiting-inout-capture-to-noescape-contexts"><a href="#SE-0035-Limiting-inout-capture-to-noescape-contexts" class="headerlink" title="SE-0035: Limiting inout capture to @noescape contexts"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md" target="_blank" rel="noopener">SE-0035</a>: Limiting inout capture to @noescape contexts</h2><p>在 Swift 中，<code>@noescape</code> 关键字能够保证闭包在被调用的函数返回前就已经执行。</p>
<blockquote>
<p>A closure is said to escape a function when the closure is passed as an argument to the function, but is called after the function returns. When you declare a function that takes a closure as one of its parameters, you can write @escaping before the parameter’s type to indicate that the closure is allowed to escape. [^noescape]</p>
</blockquote>
<p>这份提案将 <code>inout</code> 关键字捕获的内容限制在 <code>@noescape</code> 中。<br>注：参数标记为 <code>inout</code>，意味着它的值是要被修改并且最后被函数返回的。</p>
<p>因此，在 Swift 3 中，如果你在 <code>@escape</code> 闭包中试图改变一个 <code>inout</code> 的参数，编译器会报错：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">escape</span><span class="params">(f: <span class="params">()</span></span></span> -&gt; ()) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">noEscape</span><span class="params">(@noescape f: <span class="params">()</span></span></span> -&gt; ()) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">(<span class="keyword">inout</span> x: Int)</span></span> &#123;</span><br><span class="line">  escape &#123; <span class="number">_</span> = x &#125; <span class="comment">// error: closure cannot implicitly capture an inout parameter unless @noescape</span></span><br><span class="line">  noEscape &#123; <span class="number">_</span> = x &#125; <span class="comment">// OK, closure is @noescape</span></span><br><span class="line">  escape &#123;[x] <span class="keyword">in</span> <span class="number">_</span> = x &#125; <span class="comment">// OK, immutable capture</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">()</span></span> &#123;</span><br><span class="line">    escape &#123; <span class="number">_</span> = <span class="keyword">self</span> &#125; <span class="comment">// error: closure cannot implicitly capture a mutating self parameter</span></span><br><span class="line">    noEscape &#123; <span class="number">_</span> = <span class="keyword">self</span> &#125; <span class="comment">// OK</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SE-0103-Make-non-escaping-closures-the-default"><a href="#SE-0103-Make-non-escaping-closures-the-default" class="headerlink" title="SE-0103: Make non-escaping closures the default"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md" target="_blank" rel="noopener">SE-0103</a>: Make non-escaping closures the default</h2><p>现在闭包默认添加关键字 <code>@noescape</code>：</p>
<blockquote>
<p>To provide some more details, this approach has the following advantages:</p>
<ul>
<li><p>Most functional algorithms written in pure Swift will benefit because they are naturally noescape. The core team feels that this will reduce the boilerplate involved with writing these algorithms.</p>
</li>
<li><p>The compiler has enough logic in it to provide a great QoI experience when a developer doesn’t think about escaping, and tries to escape a closure - it can provide a fixit that suggests adding @escaping.</p>
</li>
<li><p>Recent changes (to disallow escaping closures to close over an inout parameter) are pushing the language to prefer noescape closures. noescape closures have also always been the preferred default, since they eliminate a class of retain cycle issues.</p>
</li>
<li><p>“@autoclosure(escaping)” can be simplified and standardized to “@autoclosure @escaping”</p>
</li>
</ul>
</blockquote>
<p><code>@noescape</code> 关键字将会在 Swift 3 中被移除，同时，编译器在发现作为参数的闭包在可能逃逸出函数体时会报错，提示你应该为参数添加 <code>@escaping</code> 关键字。</p>
<h2 id="SE-0066-Standardize-function-type-argument-syntax-to-require-parentheses"><a href="#SE-0066-Standardize-function-type-argument-syntax-to-require-parentheses" class="headerlink" title="SE-0066: Standardize function type argument syntax to require parentheses"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md" target="_blank" rel="noopener">SE-0066</a>: Standardize function type argument syntax to require parentheses</h2><p>如果你再看回 #1，你就会发现柯理化函数是这样定义的： <code>func curried(x: Int) -&gt; (String) -&gt; Float</code>。</p>
<p>而这正是这个提案所修改的地方。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">curried</span><span class="params">(x: Int)</span></span> -&gt; <span class="type">String</span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// After</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">curried</span><span class="params">(x: Int)</span></span> -&gt; (<span class="type">String</span>) -&gt; <span class="type">Float</span> &#123;</span><br></pre></td></tr></table></figure>
<p>作为参数的函数类型都要加上圆括号以表示这是一个函数参数。</p>
<p>类似地：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(Int) -&gt; Int        // 传入一个 Int </span><br><span class="line">(Int, Int) -&gt; Int   // 传入两个 Int</span><br><span class="line">((Int, Int)) -&gt; Int // 传入一个 tuple (包含两个 Int)</span><br></pre></td></tr></table></figure>
<h2 id="SE-0047-Defaulting-non-Void-functions-on-unused-results"><a href="#SE-0047-Defaulting-non-Void-functions-on-unused-results" class="headerlink" title="SE-0047: Defaulting non-Void functions on unused results"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md" target="_blank" rel="noopener">SE-0047</a>: Defaulting non-Void functions on unused results</h2><p>考虑下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;&#125;</span><br><span class="line">f()  <span class="comment">//warning: Result of call to 'f()' is unused</span></span><br></pre></td></tr></table></figure>
<p>当调用 <code>f</code> 时，编译器提示 <code>f()</code> 的返回值没有使用。</p>
<p>你可以将 <code>f</code> 赋值给下划线 <code>_</code> 来消除 warning：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;&#125;</span><br><span class="line"><span class="number">_</span> = f()</span><br></pre></td></tr></table></figure>
<p>或者在这个函数前面添加 <code>@discardableResult</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@discardableResult <span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SE-0102-Remove-noreturn-attribute-and-introduce-an-empty-Never-type"><a href="#SE-0102-Remove-noreturn-attribute-and-introduce-an-empty-Never-type" class="headerlink" title="SE-0102 Remove @noreturn attribute and introduce an empty Never type"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md" target="_blank" rel="noopener">SE-0102</a> Remove @noreturn attribute and introduce an empty Never type</h2><p><code>@noreturn</code> 关键字被移除，并加入全新的 <code>Never</code> 枚举类型，定义如下：</p>
<blockquote>
<p>The return type of functions that do not return normally; a type with no<br>values.</p>
<p>Use <code>Never</code> as the return type when declaring a closure, function, or<br>method that unconditionally throws an error, traps, or otherwise does<br>not terminate.</p>
<pre><code>func crashAndBurn() -&gt; Never {
    fatalError(&quot;Something very, very bad happened&quot;)
}
</code></pre></blockquote>
<p>因此，抛出异常可以这些写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">noReturn</span><span class="params">()</span></span> -&gt; <span class="type">Never</span> &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pickPositiveNumber</span><span class="params">(below limit: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> limit &gt;= <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        noReturn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rand(limit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SE-0054-Abolish-implicitly-unwrapped-optional-type"><a href="#SE-0054-Abolish-implicitly-unwrapped-optional-type" class="headerlink" title="SE-0054: Abolish implicitly unwrapped optional type"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md" target="_blank" rel="noopener">SE-0054</a>: Abolish implicitly unwrapped optional type</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="type">Int</span>! = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> y = x        <span class="comment">// y: Int?</span></span><br><span class="line"><span class="keyword">let</span> z = x + <span class="number">0</span>    <span class="comment">// z: Int</span></span><br></pre></td></tr></table></figure>
<p>在 Swift 3，y 的类型会变成 <code>Int?</code>，一个 optional Int，因为我们没有强制将它 unwrap。但 z 的类型为 <code>Int</code>，因为我们在做加法前已经强制把它 unwrap 成 <code>Int</code> 了。</p>
<p>更详细的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>! &#123; <span class="keyword">return</span> <span class="number">3</span> &#125; <span class="comment">// f: () -&gt; Int?, has IUO attribute</span></span><br><span class="line"><span class="keyword">let</span> x1 = f() <span class="comment">// succeeds; x1: Int? = 3</span></span><br><span class="line"><span class="keyword">let</span> x2: <span class="type">Int</span>? = f() <span class="comment">// succeeds; x2: Int? = .some(3)</span></span><br><span class="line"><span class="keyword">let</span> x3: <span class="type">Int</span>! = f() <span class="comment">// succeeds; x3: Int? = .some(3), has IUO attribute</span></span><br><span class="line"><span class="keyword">let</span> x4: <span class="type">Int</span> = f() <span class="comment">// succeeds; x4: Int = 3</span></span><br><span class="line"><span class="keyword">let</span> a1 = [f()] <span class="comment">// succeeds; a: [Int?] = [.some(3)]</span></span><br><span class="line"><span class="keyword">let</span> a2: [<span class="type">Int</span>!] = [f()] <span class="comment">// illegal, nested IUO type</span></span><br><span class="line"><span class="keyword">let</span> a3: [<span class="type">Int</span>] = [f()] <span class="comment">// succeeds; a: [Int] = [3]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>! &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125; <span class="comment">// f: () -&gt; Int?, has IUO attribute</span></span><br><span class="line"><span class="keyword">let</span> y1 = g() <span class="comment">// succeeds; y1: Int? = .none</span></span><br><span class="line"><span class="keyword">let</span> y2: <span class="type">Int</span>? = g() <span class="comment">// succeeds; y2: Int? = .none</span></span><br><span class="line"><span class="keyword">let</span> y3: <span class="type">Int</span>! = g() <span class="comment">// succeeds; y3: Int? = .none, has IUO attribute</span></span><br><span class="line"><span class="keyword">let</span> y4: <span class="type">Int</span> = g() <span class="comment">// traps</span></span><br><span class="line"><span class="keyword">let</span> b1 = [g()] <span class="comment">// succeeds; b: [Int?] = [.none]</span></span><br><span class="line"><span class="keyword">let</span> b2: [<span class="type">Int</span>!] = [g()] <span class="comment">// illegal, nested IUO type</span></span><br><span class="line"><span class="keyword">let</span> b3: [<span class="type">Int</span>] = [g()] <span class="comment">// traps</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">p</span>&lt;T&gt;<span class="params">(x: T)</span></span> &#123; <span class="built_in">print</span>(x) &#125;</span><br><span class="line">p(f()) <span class="comment">// prints "Optional(3)"; p is instantiated with T = Int?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> x5 = f() &#123;</span><br><span class="line">  <span class="comment">// executes, with x5: Int = 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> y5 = g() &#123;</span><br><span class="line">  <span class="comment">// does not execute</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来这几个 proposal 都和 Objective-C 有关系：</p>
<h2 id="SE-0111-Remove-type-system-significance-of-function-argument-labels"><a href="#SE-0111-Remove-type-system-significance-of-function-argument-labels" class="headerlink" title="SE-0111: Remove type system significance of function argument labels"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md" target="_blank" rel="noopener">SE-0111</a>: Remove type system significance of function argument labels</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md" target="_blank" rel="noopener">SE-0111</a> 是关于定义函数参数时下划线的讨论。</p>
<h2 id="SE-0021-Naming-functions-with-argument-labels"><a href="#SE-0021-Naming-functions-with-argument-labels" class="headerlink" title="SE-0021: Naming functions with argument labels"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md" target="_blank" rel="noopener">SE-0021</a>: Naming functions with argument labels</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md" target="_blank" rel="noopener">SE-0021</a> 是关于函数命名风格的讨论。</p>
<h2 id="SE-0022-Referencing-the-Objective-C-selector-of-a-method"><a href="#SE-0022-Referencing-the-Objective-C-selector-of-a-method" class="headerlink" title="SE-0022: Referencing the Objective-C selector of a method"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md" target="_blank" rel="noopener">SE-0022</a>: Referencing the Objective-C selector of a method</h2><p>Swift 3 中你可以通过使用 <code>#selector</code> 来操作 selector，就像 Objective-C 中的 <code>@selector</code> 和 <code>SEL</code> 一样。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insertSubview</span><span class="params">(view: UIView, at index: Int)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insertSubview</span><span class="params">(view; UIView, aboveSubview siblingSubview: UIView)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insertSubview</span><span class="params">(view; UIView, belowSubview siblingSubview: UIView)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f2 = someView.insertSubview(view: aboveSubview:)</span><br><span class="line"><span class="keyword">let</span> sel = #selector(<span class="type">UIView</span>.insertSubview(view:aboveSubview:))</span><br></pre></td></tr></table></figure>
<h2 id="SE-0064-Referencing-the-Objective-C-selector-of-property-getters-and-setters"><a href="#SE-0064-Referencing-the-Objective-C-selector-of-property-getters-and-setters" class="headerlink" title="SE-0064: Referencing the Objective-C selector of property getters and setters"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md" target="_blank" rel="noopener">SE-0064</a>: Referencing the Objective-C selector of property getters and setters</h2><p>现在可以通过 <code>#selector</code> 为一个类的属性指定 setter 和 getter 方法。</p>
<ul>
<li>你需要使用 dynamic 修饰符，因为需要调用和 Objective-C 里相同的运行时特性。</li>
<li>你需要将属性定义为 <code>var</code> 变量，因为需要通过 <code>#selector</code> 进行 overrides。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> firstName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">let</span> lastName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> fullName: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\(firstName) \(lastName)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.firstName = firstName</span><br><span class="line">        <span class="keyword">self</span>.lastName = lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pass</span></span><br><span class="line"><span class="keyword">let</span> firstNameGetter = #selector(getter: <span class="type">Person</span>.firstName)</span><br><span class="line"><span class="keyword">let</span> firstNameSetter = #selector(setter: <span class="type">Person</span>.firstName)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> lastNameSetter = #selector(setter: <span class="type">Person</span>.lastName)</span><br><span class="line"><span class="comment">// Argument of #selector(setter:) must refer to a variable property</span></span><br></pre></td></tr></table></figure>
<h2 id="SE-0062-Referencing-Objective-C-key-paths"><a href="#SE-0062-Referencing-Objective-C-key-paths" class="headerlink" title="SE-0062: Referencing Objective-C key-paths"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md" target="_blank" rel="noopener">SE-0062</a>: Referencing Objective-C key-paths</h2><p>跟 #13 类似，现在可以用 <code>#keyPath</code> 来指定 key path 来获取属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insertSubview</span><span class="params">(view: UIView, at index: Int)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> path = #keyPath(<span class="type">UIView</span>.superview.backgroundColor)</span><br><span class="line"><span class="keyword">let</span> color = someView.value(forKeyPath: path)</span><br></pre></td></tr></table></figure>
<h2 id="SE-0004-Remove-the-and-–-operators"><a href="#SE-0004-Remove-the-and-–-operators" class="headerlink" title="SE-0004: Remove the ++ and – operators"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="noopener">SE-0004</a>: Remove the ++ and – operators</h2><p>关于将 <code>++</code>，<code>--</code> 替换为 <code>+= 1</code>，<code>-= 1</code> 的讨论。</p>
<h2 id="SE-0007-Remove-C-style-for-loops-with-conditions-and-incrementors"><a href="#SE-0007-Remove-C-style-for-loops-with-conditions-and-incrementors" class="headerlink" title="SE-0007: Remove C-style for-loops with conditions and incrementors"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md" target="_blank" rel="noopener">SE-0007</a>: Remove C-style for-loops with conditions and incrementors</h2><p>C 风格的 for 循环从此消失：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++ &#123;</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Swift 风格的循环如约而至。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SE-0065-A-new-model-for-collections-and-indices"><a href="#SE-0065-A-new-model-for-collections-and-indices" class="headerlink" title="SE-0065: A new model for collections and indices"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md" target="_blank" rel="noopener">SE-0065</a>: A new model for collections and indices</h2><p>以往，我们可以通过先获取 <code>collections</code> 类型的 index，并通过 index 的 <code>successor()</code> 来获得下一个元素。</p>
<p>Swift 3 中，<code>collections</code> 类型将负责遍历器的遍历。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="keyword">let</span> xs = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">let</span> i = xs.startIndex</span><br><span class="line"><span class="keyword">let</span> next = i.successor()</span><br><span class="line"></span><br><span class="line"><span class="comment">// After</span></span><br><span class="line"><span class="keyword">let</span> xs = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">let</span> i = xs.startIndex</span><br><span class="line"><span class="keyword">let</span> next = xs.index(after: i)</span><br></pre></td></tr></table></figure>
<p>更多有关 <code>Collection</code> 类型的提案：</p>
<ul>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md" target="_blank" rel="noopener">Adding a public base property to slices (SE-0093)</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md" target="_blank" rel="noopener">Constraining AnySequence.init (SE-0014)</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md" target="_blank" rel="noopener">Add prefix(while:) and drop(while:) to the stdlib (SE-0045)</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0094-sequence-function.md" target="_blank" rel="noopener">Add sequence(first:next:) and sequence(state:next:) to the stdlib (SE-0094)</a></li>
</ul>
<h2 id="SE-0032-Add-first-where-method-to-Sequence"><a href="#SE-0032-Add-first-where-method-to-Sequence" class="headerlink" title="SE-0032: Add first(where:) method to Sequence ()"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md" target="_blank" rel="noopener">SE-0032</a>: Add first(where:) method to Sequence ()</h2><p>我们经常会在 <code>Collection</code> 或 <code>Sequence</code> 中查找第一个满足某种特定条件的元素，Swift 3 中为 <code>Sequence</code> 类型添加了一个 <code>first(where:)</code> 的内置方法。</p>
<p>从此，你再也不用写一些类似 <code>seq.filter(predicate).first</code> 或 <code>seq.lazy.filter(predicate).first</code> 的代码。</p>
<h2 id="SE-0008-Add-a-lazy-flatMap-for-sequences-of-optionals"><a href="#SE-0008-Add-a-lazy-flatMap-for-sequences-of-optionals" class="headerlink" title="SE-0008: Add a lazy flatMap for sequences of optionals"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0008-lazy-flatmap-for-optionals.md" target="_blank" rel="noopener">SE-0008</a>: Add a lazy flatMap for sequences of optionals</h2><p>为 <code>Sequence</code> 添加 <a href="https://airspeedvelocity.net/2014/07/10/swifts-lazy-collections-and-sequences/" target="_blank" rel="noopener">lazy</a> 版本的 flatMap 方法。</p>
<h2 id="SE-0052-Change-IteratorType-post-nil-guarantee"><a href="#SE-0052-Change-IteratorType-post-nil-guarantee" class="headerlink" title="SE-0052: Change IteratorType post-nil guarantee"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0052-iterator-post-nil-guarantee.md" target="_blank" rel="noopener">SE-0052</a>: Change IteratorType post-nil guarantee</h2><p>当迭代器类型开始返回 nil 时，后面的结果都会返回 nil。</p>
<h2 id="SE-0025-Scooped-access-level"><a href="#SE-0025-Scooped-access-level" class="headerlink" title="SE-0025: Scooped access level"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md" target="_blank" rel="noopener">SE-0025</a>: Scooped access level</h2><p>Swift 3 加入新的访问级别：<code>fileprivate</code>，只能在当前文件内可以访问对应的 API。</p>
<blockquote>
<ul>
<li><p><strong>Open</strong> access and public access enable entities to be used within any source file from their defining module, and also in a source file from another module that imports the defining module. You typically use open or public access when specifying the public interface to a framework. The difference between open and public access is described below.</p>
</li>
<li><p><strong>Internal</strong> access enables entities to be used within any source file from their defining module, but not in any source file outside of that module. You typically use internal access when defining an app’s or a framework’s internal structure.</p>
</li>
<li><p><strong>File-private</strong> access restricts the use of an entity to its own defining source file. Use file-private access to hide the implementation details of a specific piece of functionality when those details are used within an entire file.</p>
</li>
<li><p><strong>Private</strong> access restricts the use of an entity to the enclosing declaration. Use private access to hide the implementation details of a specific piece of functionality when those details are used only within a single declaration.</p>
</li>
</ul>
</blockquote>
<p><code>Open</code> &gt; <code>Internal(default)</code> &gt; <code>fileprivate</code> &gt; <code>private</code></p>
<h2 id="SE-0070-Make-optional-requirements-Objective-C-only"><a href="#SE-0070-Make-optional-requirements-Objective-C-only" class="headerlink" title="SE-0070: Make optional requirements Objective-C only"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md" target="_blank" rel="noopener">SE-0070</a>: Make optional requirements Objective-C only</h2><p>在 Objective-C 中，协议方法有两种：分别是 require 和 optional。在 Swift 3 中，你也可以为一个协议方法添加 <code>optional</code> 关键字：前提是 protocol 和 func 前都有 <code>@objc</code> 标志。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">NSTableViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span>: NSTableView,</span></span></span><br><span class="line"><span class="function"><span class="params">                            viewFor: NSTableColumn,</span></span></span><br><span class="line"><span class="function"><span class="params">                            row: Int)</span></span> -&gt; <span class="type">NSView</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SE-0011-Replace-typealias-keyword-with-associatedtype-for-associated-type-declarations"><a href="#SE-0011-Replace-typealias-keyword-with-associatedtype-for-associated-type-declarations" class="headerlink" title="SE-0011: Replace typealias keyword with associatedtype for associated type declarations"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md" target="_blank" rel="noopener">SE-0011</a>: Replace typealias keyword with associatedtype for associated type declarations</h2><h2 id="SE-0092-Typealiases-in-protocols-and-protocol-extensions"><a href="#SE-0092-Typealiases-in-protocols-and-protocol-extensions" class="headerlink" title="SE-0092: Typealiases in protocols and protocol extensions"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md" target="_blank" rel="noopener">SE-0092</a>: Typealiases in protocols and protocol extensions</h2><p><code>typealias</code> 在以前的版本中有两个用处，一个是用在 protocol 中，还有一个是用在 extension 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个 <code>typealias</code> 将 <code>Container.Generator.Element</code> 的名字用 <code>Element</code> 代替。 而 protocol 里面所用的 <code>typealias</code>，其实并不是一个真正意义上的 <em>typealias</em> ，它只是一个我们稍后在 protocol 里面用到的东西，并知道它会遵从 SequenceType。这个 <code>Container</code> 应该是一个 <code>associatedtype</code>，而不是一个严格意义上的 <em>typealias</em>。</p>
<p>Swift 3 中加入了 <code>associatedtype</code> 关键字更明确地区分开这两种用法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// After</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    associatedtype <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    associatedtype <span class="type">Iterator</span> : <span class="type">IteratorProtocol</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Iterator</span>.<span class="type">Element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SE-0048-Generic-type-aliases"><a href="#SE-0048-Generic-type-aliases" class="headerlink" title="SE-0048: Generic type aliases"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md" target="_blank" rel="noopener">SE-0048</a>: Generic type aliases</h2><p>你可以将范型用在 <code>typealias</code> 上，使类型定义更具表达性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">StringDictionary</span>&lt;<span class="type">T</span>&gt; = <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">T</span>&gt;</span><br><span class="line"><span class="keyword">typealias</span> <span class="type">DictionaryOfStrings</span>&lt;<span class="type">T</span> : <span class="type">Hashable</span>&gt; = <span class="type">Dictionary</span>&lt;<span class="type">T</span>, <span class="type">String</span>&gt;</span><br><span class="line"><span class="keyword">typealias</span> <span class="type">IntFunction</span>&lt;<span class="type">T</span>&gt; = (<span class="type">T</span>) -&gt; <span class="type">Int</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Vec3</span>&lt;<span class="type">T</span>&gt; = (<span class="type">T</span>, <span class="type">T</span>, <span class="type">T</span>)</span><br><span class="line"><span class="keyword">typealias</span> <span class="type">BackwardTriple</span> &lt;<span class="type">T1</span>, <span class="type">T2</span>, <span class="type">T3</span>&gt; = (<span class="type">T3</span>, <span class="type">T2</span>, <span class="type">T1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="SE-0069-Mutability-and-foundation-value-types"><a href="#SE-0069-Mutability-and-foundation-value-types" class="headerlink" title="SE-0069: Mutability and foundation value types"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md" target="_blank" rel="noopener">SE-0069</a>: Mutability and foundation value types</h2><p>关于 Mutability 和值类型的讨论。</p>
<h2 id="SE-0086-Drop-NS-prefix-in-swift-foundation"><a href="#SE-0086-Drop-NS-prefix-in-swift-foundation" class="headerlink" title="SE-0086: Drop NS prefix in swift foundation"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md" target="_blank" rel="noopener">SE-0086</a>: Drop NS prefix in swift foundation</h2><p><a href="http://stackoverflow.com/questions/473758/what-does-the-ns-prefix-mean" target="_blank" rel="noopener">带有历史包袱</a>的 <code>NS</code> 前缀终于在 Swift 3 移除了，开发者的大事，大快所有人心的大好事。</p>
<p>更多相关提案：</p>
<ul>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md" target="_blank" rel="noopener">Fully eliminate implicit bridging conversions from Swift (SE-0072)</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md" target="_blank" rel="noopener">Remove the Boolean protocol (SE-0109)</a></li>
</ul>
<h2 id="SE-0112-Improved-NSError-bridging"><a href="#SE-0112-Improved-NSError-bridging" class="headerlink" title="SE-0112: Improved NSError bridging"></a><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0112-nserror-bridging.md" target="_blank" rel="noopener">SE-0112</a>: Improved NSError bridging</h2><p>还记得 Swift 2 加入的 Error Handling (<code>try</code> 和 <code>catch</code>，<code>throws</code> 和 <code>rethrows</code>，<code>throw</code> 和 <code>do</code>) 吗？</p>
<p>这个提案就是关于桥接 <code>ErrorProtocol</code> 和 <code>NSError</code> 的讨论，Swift 3 改善了 <code>NSError</code> 的错误处理，并加入新的 <code>LocalizedError</code> 和 <code>RecoverableError</code> 类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">LocalizedError</span> : <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> errorDescription: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> failureReason: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> recoverySuggestion: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> helpAnchor: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">RecoverableError</span> : <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> recoveryOptions: [<span class="type">String</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attemptRecovery</span><span class="params">(optionIndex recoveryOptionIndex: Int,</span></span></span><br><span class="line"><span class="function"><span class="params">                          resultHandler handler: <span class="params">(recovered: Bool)</span></span></span> -&gt; <span class="type">Void</span>)            </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attemptRecovery</span><span class="params">(optionIndex recoveryOptionIndex: Int)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h2><ul>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md" target="_blank" rel="noopener">SE-0002</a> - Removing currying func declaration syntax</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="noopener">SE-0004</a> - Remove the ++ and – operators</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md" target="_blank" rel="noopener">SE-0007</a> - Remove C-style for-loops with conditions and incrementers</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0008-lazy-flatmap-for-optionals.md" target="_blank" rel="noopener">SE-0008</a> - Add a Lazy flatMap for Sequences of Optionals</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md" target="_blank" rel="noopener">SE-0011</a> - Replace typealias keyword with associatedtype for associated type declarations</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md" target="_blank" rel="noopener">SE-0021</a> - Naming Functions with Argument Labels</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md" target="_blank" rel="noopener">SE-0022</a> - Referencing the Objective-C selector of a method</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md" target="_blank" rel="noopener">SE-0025</a> - Scoped Access Level</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md" target="_blank" rel="noopener">SE-0032</a> - Add first(where:) method to Sequence</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md" target="_blank" rel="noopener">SE-0035</a> - Limiting inout capture to @noescape contexts</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md" target="_blank" rel="noopener">SE-0042</a> - Flattening the function type of unapplied method references</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md" target="_blank" rel="noopener">SE-0047</a> - Defaulting non-Void functions so they warn on unused results</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md" target="_blank" rel="noopener">SE-0048</a> - Generic Type Aliases</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0049-noescape-autoclosure-type-attrs.md" target="_blank" rel="noopener">SE-0049</a> - Move @noescape and @autoclosure to be type attributes</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0052-iterator-post-nil-guarantee.md" target="_blank" rel="noopener">SE-0052</a> - Change IteratorType post-nil guarantee</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md" target="_blank" rel="noopener">SE-0054</a> - Abolish ImplicitlyUnwrappedOptional type</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md" target="_blank" rel="noopener">SE-0062</a> - Referencing Objective-C key-paths</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md" target="_blank" rel="noopener">SE-0064</a> - Referencing the Objective-C selector of property getters and setters</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md" target="_blank" rel="noopener">SE-0065</a> - A New Model for Collections and Indices</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md" target="_blank" rel="noopener">SE-0066</a> - Standardize function type argument syntax to require parentheses</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md" target="_blank" rel="noopener">SE-0069</a> - Mutability and Foundation Value Types</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md" target="_blank" rel="noopener">SE-0070</a> - Make Optional Requirements Objective-C-only</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md" target="_blank" rel="noopener">SE-0086</a> - Drop NS Prefix in Swift Foundation</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md" target="_blank" rel="noopener">SE-0092</a> - Typealiases in protocols and protocol extensions</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md" target="_blank" rel="noopener">SE-0102</a> - Remove @noreturn attribute and introduce an empty Never type</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md" target="_blank" rel="noopener">SE-0103</a> - Make non-escaping closures the default</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md" target="_blank" rel="noopener">SE-0111</a> - Remove type system significance of function argument labels</li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0112-nserror-bridging.md" target="_blank" rel="noopener">SE-0112</a> - Improved NSError Bridging</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://realm.io/news/swiftcasts-daniel-steinberg-whats-new-in-swift-3-part-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 
    
    </summary>
    
    
      <category term="swift3" scheme="http://wongzigii.github.io/tags/swift3/"/>
    
  </entry>
  
  <entry>
    <title>Understanding How Quick works</title>
    <link href="http://wongzigii.github.io/2016/09/06/Understanding-How-Quick-works/"/>
    <id>http://wongzigii.github.io/2016/09/06/Understanding-How-Quick-works/</id>
    <published>2016-09-06T15:54:14.000Z</published>
    <updated>2019-05-30T04:07:13.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/Quick/Quick" target="_blank" rel="noopener">Quick</a> 是一个基于 XCTest 框架的测试框架。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img src="../img/files.png" alt></p>
<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><ul>
<li>关于 <strong>XCTestCase</strong>, <strong>XCTestSuite</strong> 以及 <strong>XCTest</strong> 的关系，请参考 <a href="http://stackoverflow.com/a/39288791/4234171" target="_blank" rel="noopener">StackOverflow 上面的一个回答</a>。</li>
<li>Example</li>
<li>ExampleGroup</li>
<li>ExampleMetadata</li>
</ul>
<h2 id="World"><a href="#World" class="headerlink" title="World"></a>World</h2><p>主要用于自定义测试的 Configuration。<br>World 是一个单例，它主要功能是用来维护 <code>QuickSpec</code> 对应的根 example group 以及 example。</p>
<h2 id="QuickSpec-的实现"><a href="#QuickSpec-的实现" class="headerlink" title="QuickSpec 的实现"></a>QuickSpec 的实现</h2><p>你写测试时所有的 TestCase 都要继承于这个 QuickSepc 类，我们前面说过，Quick 是一个基于 XCTest 的测试框架，并且实现了自己的语法。你可能会有疑问，XCTest 是如何识别 Quick 的语法的？其实这个类就是关键所在，因此只有这样你的测试代码才能够被 XCTest 框架识别出来。 <code>QuickSepc</code> 继承自 <code>XCTestCase</code>，并依赖 Objective-C 的 runtime 特性来实现。</p>
<h3 id="重写-initialize"><a href="#重写-initialize" class="headerlink" title="重写 initialize"></a>重写 initialize</h3><p>当每个 spec 初始化时，<code>[NSObject initialize]</code> 方法会被调用。QuickSpec 通过重写 <code>initialize</code> 类方法的方式调用 <code>[QuickSpec spec]</code> 来初始化一个 spec 实例。<em>其中会创建维护 example group 的堆栈，并使用 Quick.World 单例注册 example。</em></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">    [QuickConfiguration initialize];</span><br><span class="line">    World *world = [World sharedWorld];</span><br><span class="line">    [world performWithCurrentExampleGroup:[world rootExampleGroupForSpecClass:<span class="keyword">self</span>] closure:^&#123;</span><br><span class="line">        QuickSpec *spec = [<span class="keyword">self</span> new];</span><br><span class="line">        <span class="keyword">@try</span> &#123;</span><br><span class="line">            [spec spec];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">            [<span class="built_in">NSException</span> raise:<span class="built_in">NSInternalInconsistencyException</span></span><br><span class="line">                        format:<span class="string">@"An exception occurred when building Quick's example groups.\n"</span></span><br><span class="line">             <span class="string">@"Some possible reasons this might happen include:\n\n"</span></span><br><span class="line">             <span class="string">@"- An 'expect(...).to' expectation was evaluated outside of "</span></span><br><span class="line">             <span class="string">@"an 'it', 'context', or 'describe' block\n"</span></span><br><span class="line">             <span class="string">@"- 'sharedExamples' was called twice with the same name\n"</span></span><br><span class="line">             <span class="string">@"- 'itBehavesLike' was called with a name that is not registered as a shared example\n\n"</span></span><br><span class="line">             <span class="string">@"Here's the original exception: '%@', reason: '%@', userInfo: '%@'"</span>,</span><br><span class="line">             exception.name, exception.reason, exception.userInfo];</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="keyword">self</span> testInvocations];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义-spec"><a href="#自定义-spec" class="headerlink" title="自定义 spec"></a>自定义 spec</h3><p>写测试的时候，你需要重写 spec 方法来自定义一组 example group 或者 example。看代码我们知道，World 单例从根 example group 开始，顺着结构树往下遍历，并对每一个 example 执行 clourse。其中，clourse 包括几个部分：</p>
<ol>
<li>新建一个 QuickSpec 对象</li>
<li>try catch 获取我们的测试用例时可能抛出的异常</li>
<li>向这个对象发送 <code>testInvocations</code> 消息</li>
</ol>
<h3 id="重写-testInvocation-方法"><a href="#重写-testInvocation-方法" class="headerlink" title="重写 testInvocation 方法"></a>重写 testInvocation 方法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSArray</span> *)testInvocations &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *examples = [[World sharedWorld] examplesForSpecClass:[<span class="keyword">self</span> <span class="keyword">class</span>]];</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *invocations = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:[examples count]];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableSet</span>&lt;<span class="built_in">NSString</span>*&gt; *selectorNames = [<span class="built_in">NSMutableSet</span> set];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (Example *example <span class="keyword">in</span> examples) &#123;</span><br><span class="line">        SEL selector = [<span class="keyword">self</span> addInstanceMethodForExample:example classSelectorNames:selectorNames];</span><br><span class="line">        <span class="built_in">NSInvocation</span> *invocation = [<span class="keyword">self</span> invocationForInstanceMethodWithSelector:selector</span><br><span class="line">                                                                         example:example];</span><br><span class="line">        [invocations addObject:invocation];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> invocations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setInvocation:(<span class="built_in">NSInvocation</span> *)invocation &#123;</span><br><span class="line">    <span class="keyword">self</span>.example = objc_getAssociatedObject(invocation, QCKExampleKey);</span><br><span class="line">    [<span class="keyword">super</span> setInvocation:invocation];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码做了以下两件事：</p>
<ol>
<li>通过 World 单例保存的映射获取我们已经定义的 examples，包括 configuration 里面设置的过滤规则</li>
<li>遍历 examples，为每个对应的 example：通过<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSMethodSignature_Class/" target="_blank" rel="noopener">方法签名</a> 生成 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSInvocation_Class/" target="_blank" rel="noopener">NSInvocation</a> 实现 XCTestCase 的消息转发（即执行测试方法），然后 hook 进 Invocation 的 setter 方法，这样就能对 current example 保持引用。<em>从而测试失败时可以获取 current example 的相关信息如名字，行数等等</em></li>
</ol>
<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Quick/Quick&quot; target=&quot;_blank&quot; rel=&quot;noopener
    
    </summary>
    
    
      <category term="XCTest" scheme="http://wongzigii.github.io/tags/XCTest/"/>
    
  </entry>
  
  <entry>
    <title>Dancing With Docker</title>
    <link href="http://wongzigii.github.io/2016/08/08/Dancing-With-Docker/"/>
    <id>http://wongzigii.github.io/2016/08/08/Dancing-With-Docker/</id>
    <published>2016-08-08T14:22:48.000Z</published>
    <updated>2019-05-30T04:30:01.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Create-a-machine"><a href="#Create-a-machine" class="headerlink" title="Create a machine"></a>Create a machine</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --driver virtualbox default</span><br></pre></td></tr></table></figure>
<p>这里 default 是这个 docker machine 的名字。</p>
<h3 id="List-available-machines"><a href="#List-available-machines" class="headerlink" title="List available machines"></a>List available machines</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ls</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>NAME</th>
<th>ACTIVE</th>
<th>DRIVER</th>
<th>STATE</th>
<th>URL</th>
<th>SWARM</th>
<th>DOCKER</th>
<th>ERRORS</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>-</td>
<td>virtualbox</td>
<td>Running</td>
<td>tcp://192.168.99.100:2376</td>
<td></td>
<td>v1.12.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>toolbox</td>
<td>-</td>
<td>virtualbox</td>
<td>Running</td>
<td>tcp://192.168.99.101:2376</td>
<td></td>
<td>Unknown</td>
<td>Unable to query docker version: Get <a href="https://192.168.99.101:2376/v1.15/version" target="_blank" rel="noopener">https://192.168.99.101:2376/v1.15/version</a>: x509: certificate is valid for 192.168.99.100, not 192.168.99.101</td>
<td></td>
</tr>
</tbody>
</table>
<p>发现第二次报错：</p>
<blockquote>
<p>Unable to query docker version: Get <a href="https://192.168.99.101:2376/v1.15/version" target="_blank" rel="noopener">https://192.168.99.101:2376/v1.15/version</a>: x509: certificate is valid for 192.168.99.100, not 192.168.99.101</p>
</blockquote>
<p><a href="https://github.com/docker/machine/issues/531#issuecomment-168356493" target="_blank" rel="noopener">解决办法</a>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine regenerate-certs default</span><br></pre></td></tr></table></figure>
<h3 id="Connect-your-shell-to-the-new-machine"><a href="#Connect-your-shell-to-the-new-machine" class="headerlink" title="Connect your shell to the new machine"></a>Connect your shell to the new machine</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env default)</span>"</span></span><br></pre></td></tr></table></figure>
<p>如果不执行这个命令，会提示 <code>docker-machine</code> not found。  </p>
<h3 id="Get-the-host-IP-address"><a href="#Get-the-host-IP-address" class="headerlink" title="Get the host IP address"></a>Get the host IP address</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ip default</span><br></pre></td></tr></table></figure>
<blockquote>
<p>192.168.99.100</p>
</blockquote>
<h3 id="SSH-connection"><a href="#SSH-connection" class="headerlink" title="SSH connection"></a>SSH connection</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh default</span><br></pre></td></tr></table></figure>
<h3 id="Download-and-run-MySQL"><a href="#Download-and-run-MySQL" class="headerlink" title="Download and run MySQL"></a>Download and run MySQL</h3><p>如果本地没有合适的镜像，则会从 Docker-Hub 的仓库拉取，-p 参数指定映射的端口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e MYSQL_ROOT_PASSWORD=qweasd --name mysql -d -p=3306:3306 mysql</span><br></pre></td></tr></table></figure>
<p>如果镜像已经在运行的状态下再 <code>docker run foo</code> 会报错：</p>
<blockquote>
<p>Error response from daemon: Conflict. The name “foo” is already in use by container f9e5798a82e0. You have to delete (or rename) that container to be able to reuse that name.</p>
</blockquote>
<p>请注意：</p>
<p><code>docker run</code> 会新创建一个镜像</p>
<p>而</p>
<p><code>docker start</code> 只会将（已存在）停止的镜像重新启动。</p>
<h3 id="Remove-a-docker"><a href="#Remove-a-docker" class="headerlink" title="Remove a docker"></a>Remove a docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm mysql</span><br></pre></td></tr></table></figure>
<h3 id="Start-an-existed-docker"><a href="#Start-an-existed-docker" class="headerlink" title="Start an existed docker"></a>Start an existed docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start mysql</span><br></pre></td></tr></table></figure>
<h3 id="Stop-a-docker"><a href="#Stop-a-docker" class="headerlink" title="Stop a docker"></a>Stop a docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mysql</span><br></pre></td></tr></table></figure>
<h3 id="List-runing-dockers"><a href="#List-runing-dockers" class="headerlink" title="List runing dockers"></a>List runing dockers</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<blockquote>
<table>
<thead>
<tr>
<th></th>
<th>CONTAINER ID</th>
<th>IMAGE</th>
<th>COMMAND</th>
<th>CREATED</th>
<th>STATUS</th>
<th>PORTS</th>
<th>NAMES</th>
</tr>
</thead>
<tbody>
<tr>
<td>83bcb5091ba1</td>
<td>mysql</td>
<td>“docker-entrypoint.sh”</td>
<td>55 minutes ago</td>
<td>Up 28 minutes</td>
<td>0.0.0.0:3306-&gt;3306/tcp</td>
<td>mysql</td>
<td></td>
</tr>
<tr>
<td>cd232a5729da</td>
<td>daocloud.io/daocloud/daomonit</td>
<td>“/usr/local/bin/daomo”</td>
<td>About an hour ago</td>
<td>Up 46 minutes</td>
<td></td>
<td>daomonit</td>
<td></td>
</tr>
</tbody>
</table>
</blockquote>
<p><code>docker ps -a</code> 可以显示全部的镜像。</p>
<h3 id="Docker-help"><a href="#Docker-help" class="headerlink" title="Docker help"></a>Docker help</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p><a href="https://github.com/docker-library/mysql/issues/95" target="_blank" rel="noopener">https://github.com/docker-library/mysql/issues/95</a></p>
<p><a href="https://hub.docker.com/r/mysql/mysql-server/" target="_blank" rel="noopener">https://hub.docker.com/r/mysql/mysql-server/</a></p>
<p><a href="https://docs.docker.com/machine/get-started/" target="_blank" rel="noopener">https://docs.docker.com/machine/get-started/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Create-a-machine&quot;&gt;&lt;a href=&quot;#Create-a-machine&quot; class=&quot;headerlink&quot; title=&quot;Create a machine&quot;&gt;&lt;/a&gt;Create a machine&lt;/h3&gt;&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="docker" scheme="http://wongzigii.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Pod install vs. Pod update</title>
    <link href="http://wongzigii.github.io/2016/04/23/Pod-install-vs-Pod-update/"/>
    <id>http://wongzigii.github.io/2016/04/23/Pod-install-vs-Pod-update/</id>
    <published>2016-04-23T07:19:53.000Z</published>
    <updated>2019-05-30T04:07:13.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>对于很多经常使用 CocoaPods 开发者，有一个比较困惑的问题是：什么时候用 <code>pod install</code> 以及 <code>pod update</code> ?</p>
<p><strong>TL;DR</strong>: </p>
<ul>
<li>使用 <code>pod install</code> 安装 <em>新</em> 的 pod，即使你之前已经通过 <code>pod install</code> 安装（或移除过）项目中的 pod</li>
<li>当且仅当你需要将 pods 升级到一个更新的版本的时候，使用 <code>pod update [PODNAME]</code> </li>
</ul>
<h3 id="pod-install"><a href="#pod-install" class="headerlink" title="pod install"></a>pod install</h3><p>这个命令经常用于为新项目安装 pods，以及通过修改 Podfile 来增加，升级或移除 pod 的操作。</p>
<ul>
<li><p>每次当你运行 <code>pod install</code> 这个命令的时候，CocoaPods 会下载并安装你在 Podfile 中指定的 pods，并将这次安装的 pod 以及 pod 对应的版本写入 <code>Podfile.lock</code> 这个文件，这个文件的作用用于跟踪并锁定已安装 pod 的版本。</p>
</li>
<li><p>当你运行 <code>pod install</code> 时，CocoaPods 仅会对 <code>Podfile.lock</code> 文件里没有的 pod 安装。</p>
<ul>
<li>对于那些已经在 Podfile.lock 里的 pod，CocoaPods 会下载文件中指定的版本号，而不会尝试检查是否有新的版本</li>
<li>对于那些还不在 Podfile.lock 里的 pod，CocoaPods 会尝试搜索你在 Podfile.lock 中指定的 版本 (<code>pod &#39;MyPod&#39;, &#39;~&gt; 1.2&#39;</code>)</li>
</ul>
</li>
</ul>
<h3 id="pod-outdated"><a href="#pod-outdated" class="headerlink" title="pod outdated"></a>pod outdated</h3><p>当你运行 <code>pod outdated</code>，CocoaPods 会将所有比 Podfile.lock 中指定的存在更新的版本的 pods 罗列出来。<br>这意味着如果你对 <em>这些 pod</em> 运行 <code>pod update PODNAME</code>，他们会被升级到更新的版本。<br>（注：仅会升级到仍满足 <code>Podfile.lock</code> 中版本的最新版本，举个例子，你在 Podfile.lock 中指定 <code>pod &#39;MyPod&#39;, &#39;~&gt;1.2&#39;</code>，那仅会升级到 <code>1.2</code> 的最新版本， 不会升级到 <code>1.3</code> 或 <code>1.4</code> ）</p>
<h3 id="pod-update"><a href="#pod-update" class="headerlink" title="pod update"></a>pod update</h3><p>当你 <em>直接</em> 运行 <code>pod update</code>，CocoaPods 会尝试将 <code>PODNAME</code> 更新到<strong>最新</strong>版本。如上面所说的，仍会满足 Podfile.lock 的限制。</p>
<h2 id="Intended-usage"><a href="#Intended-usage" class="headerlink" title="Intended usage"></a>Intended usage</h2><ul>
<li><p><code>pod update PODNAME</code> 只会更新一个特定的 pod，相反，<code>pod install</code> 不会尝试去对已经安装过的 pod 更新。</p>
</li>
<li><p>当你在 Podfile 中增加了一个新的 pod 的时候，你应该用 <code>pod install</code>，而不是 <code>pod update</code>。</p>
</li>
<li><p>使用 <code>pod update</code> 当且仅当你需要更新 pod 的版本的时候。</p>
</li>
</ul>
<h2 id="Commit-your-Podfile-lock"><a href="#Commit-your-Podfile-lock" class="headerlink" title="Commit your Podfile.lock"></a>Commit your Podfile.lock</h2><p><em>尽可能将 Podfile.lcok 文件提交到项目的目录中，否则，由于 Podfile.lock 锁定的 pod 的版本问题，可能会使项目构建失败。</em></p>
<h2 id="Scenario-Example"><a href="#Scenario-Example" class="headerlink" title="Scenario Example"></a>Scenario Example</h2><p>例子略过，详情请看<a href="https://guides.cocoapods.org/using/pod-install-vs-update.html#scenario-example" target="_blank" rel="noopener">这里</a></p>
<h2 id="Using-exact-versions-in-the-Podfile-is-not-enough"><a href="#Using-exact-versions-in-the-Podfile-is-not-enough" class="headerlink" title="Using exact versions in the Podfile is not enough"></a>Using exact versions in the Podfile is not enough</h2><p>你可能会想：如果我在 Podfile 中特定指定一个具体的版本，像 <code>pod &#39;A&#39;, &#39;1.0.0&#39;</code>这样，这样就保证了每个人都会用到相同版本的 pod 了。</p>
<p>即使接着使用 <code>pod update</code> 来增加新的 pod，那也不会导致其他的 pod 升级。（因为你已经明确指定一个版本号了）</p>
<p>事实真的是这样吗？不是的。</p>
<p>一个典型的例子：</p>
<p>如果 pod <code>A</code> 有一个依赖叫 pod <code>A2</code> – 在 <code>A.podspec</code> 声明为 <code>dependency &#39;A2&#39;, &#39;~&gt; 3.0&#39;</code>，在这个情况下，你在 Podfile 中指定 A 的版本如：<code>pod &#39;A&#39;, &#39;1.0.0&#39;</code>，User1 和 User2 确实使用的是同一个版本的 pod <code>A</code>。 但是：</p>
<ul>
<li>User1 可能会将 <code>A2</code> 升级到 <code>3.4</code>，因为它可能是那时候 <code>A2</code> 的最新版本。</li>
<li>当新加入项目的 User2 运行 <code>pod install</code>，它也可能会安装 <code>A2</code> 的 <code>3.5</code> 版本，因为 <code>A2</code> 的维护者可能也发布了新的版本。</li>
</ul>
<p>这也就是 <code>Podfile.lock</code> 以及合理使用 <code>pod install</code> vs. <code>pod update</code> 的作用，来确保项目组里的每个人在各自的电脑上都使用相同的 pod 版本。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;对于很多经常使用 CocoaPods 开发者，有一个比较困惑
    
    </summary>
    
    
      <category term="CocoaPods" scheme="http://wongzigii.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Setup PPTP VPN Server on CentOS 6</title>
    <link href="http://wongzigii.github.io/2016/03/29/Setup-PPTP-VPN-Server-on-CentOS-6/"/>
    <id>http://wongzigii.github.io/2016/03/29/Setup-PPTP-VPN-Server-on-CentOS-6/</id>
    <published>2016-03-29T08:57:00.000Z</published>
    <updated>2019-05-30T04:57:55.706Z</updated>
    
    <content type="html"><![CDATA[<p>This article will not dive into the installation of pptpd. Instead, I would like to blog down the configurations and some issues I came cross with the follow-up work.</p>
<p>So here, you’ve just installed the pptpd through <code>yum install</code> on CentOS, or <code>apt-get install</code> on Ubuntu.</p>
<p>CentOS version: centos-release-6-7.el6.centos.12.3.x86_64</p>
<h2 id="IP-settings"><a href="#IP-settings" class="headerlink" title="IP settings"></a>IP settings</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/pptpd.conf</span><br></pre></td></tr></table></figure>
<p>Uncomment <code>localip</code> and <code>remoteip</code> lines and replace the following IP with you local IP address and remote IP address.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localip 192.168.9.1</span><br><span class="line">remoteip 192.168.9.11-30</span><br></pre></td></tr></table></figure>
<p>The localip is the local IP address of server, while remoteip, as its name implies, the <em>range</em> of remote IPs being able to distribution.</p>
<h2 id="Configure-Username-and-Pwd"><a href="#Configure-Username-and-Pwd" class="headerlink" title="Configure Username and Pwd"></a>Configure Username and Pwd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>
<p>Change the username and password accordingly.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username1  pptpd   Pp$<span class="variable">$w0rd</span>  *</span><br><span class="line">username2  pptpd   P@$<span class="variable">$w0rd2</span>  *</span><br></pre></td></tr></table></figure>
<p>Note that there is <code>*</code> at the end of the line.</p>
<h2 id="IPv4-network-forwarding"><a href="#IPv4-network-forwarding" class="headerlink" title="IPv4 network forwarding"></a>IPv4 network forwarding</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>net.ipv4.ip_forward = 1</p>
</blockquote>
<p>And then apply the change with the following command.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<p>(Re)start service</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service pptpd start</span><br></pre></td></tr></table></figure>
<p>So far so good. Now you’re able to connect to VPN server.</p>
<h1 id="Troubleshoting"><a href="#Troubleshoting" class="headerlink" title="Troubleshoting"></a>Troubleshoting</h1><p>However, I could not access the network resources over the VPN server.</p>
<p>So far I’ve confirmed:</p>
<ul>
<li>ping successfully on the server side so rule DNS issue out as the cause of the problem.</li>
<li>ping to server side sucessfully from client side.</li>
<li>use <code>ifconfig</code> to check out <code>ppp0</code> interface is working.</li>
</ul>
<p>So, it sounds like the default route is not being set correctly when VPN connection is brought up.</p>
<h2 id="Configure-routing-with-iptables"><a href="#Configure-routing-with-iptables" class="headerlink" title="Configure routing with iptables"></a>Configure routing with iptables</h2><p>We’re going to use this following command to check out the <code>eth0(1)</code> or <code>seth0</code> interface. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p>The VPN server is listening for PPTP traffic on TCP port 1723 and port 1701 for L2TP traffic on UDP. So apply this rule to iptables:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 1723 -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>Also, apply <code>NAT</code> rule. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -o seth0 -s 192.168.9.0/24 -j SNAT --to-source 118.193.160.45</span><br></pre></td></tr></table></figure>
<p><code>192.168.9.0/24</code> means <code>192.168.9.0 255.255.255.0</code>, which <code>192.168.9.0</code> is the incoming address, as <code>remoteip</code> we’ve early configured in <code>pptpd.conf</code>, and the part after the slash, in this case, <code>24</code>, is how many subnet mask bits to use. So <code>255.255.255.0</code> is using 24 of the 32 bits to create the subnet.<br>At the same time, <code>118.193.160.45</code> is your server’s public IP address.</p>
<p>You’re almost there! Next step, save iptables you’ve added</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure>
<p>Finally, restart iptables.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables start</span><br></pre></td></tr></table></figure>
<p>Done!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article will not dive into the installation of pptpd. Instead, I would like to blog down the configurations and some issues I came c
    
    </summary>
    
    
      <category term="VPS, CentOS" scheme="http://wongzigii.github.io/tags/VPS-CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Without Thought by Naoto Fukasawa</title>
    <link href="http://wongzigii.github.io/2016/01/29/Without-Thought-by-Naoto-Fukasawa/"/>
    <id>http://wongzigii.github.io/2016/01/29/Without-Thought-by-Naoto-Fukasawa/</id>
    <published>2016-01-29T09:18:04.000Z</published>
    <updated>2019-05-30T04:07:13.523Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>这篇文章的意义在于测试这个主题所支持的功能</p>
<h2 id="测试-MarkDown-功能"><a href="#测试-MarkDown-功能" class="headerlink" title="测试 MarkDown 功能"></a>测试 MarkDown 功能</h2><p>0x01. 表格</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>0x02. 代码块</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>0x03. 行内代码</p>
<p>这是行内代码 <code>print(&quot;123&quot;)</code></p>
<p>0x04. 引用</p>
<blockquote>
<p>这是一行引用</p>
</blockquote>
<p>0x05. 链接</p>
<p><a href="https://github.com/wongzigii" target="_blank" rel="noopener">GitHub</a></p>
<p>0x06. 图片</p>
<p><img src="https://avatars1.githubusercontent.com/u/7384288?s=460&amp;v=4" alt></p>
<p>0x07. 引用</p>
<blockquote>
<p>The end-users know all the various different parameters that will determine the appropriate solution without ever realizing it. This is why vague notions of ‘if only there were something like this’ never result in a concrete image, and also why, whenever they do find a good design, they invariably remark, ‘I’ve always wanted something like this’.</p>
<p>The sensibility here is that design isn’t something that I generate, so much as something that already exists in situ; all I do is give it concrete form.</p>
</blockquote>
<h2 id="Hexo-功能"><a href="#Hexo-功能" class="headerlink" title="Hexo 功能"></a>Hexo 功能</h2><p>0x01. img</p>
<p><img src="https://avatars1.githubusercontent.com/u/7384288?s=460&v=4" alt="Smiley face" height="42" width="42"></p>
<p>0x02. raw</p>
<pre>Text I want left alone@donotlink.me</pre>

<p>0x03. tip</p>
<div class="tip"><br>    预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！<br></div>

<p>0x04. iframe</p>
<iframe src="//music.163.com/outchain/player?type=2&id=19945726&auto=0&height=66" width="500" height="86" frameborder="0" allowfullscreen></iframe>

<p>0x05. gist</p>
<script src="https://gist.github.com/wongzigii/a96816dfb124278fc50c9820ff60a6dc.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这篇文章的意义在于测试这个主题所支持的功能&lt;/p&gt;
&lt;h2 id=&quot;测试-MarkDown-功能&quot;&gt;&lt;a href=&quot;#测试-MarkDown-功能&quot; class=&quot;headerlink&quot; title=&quot;测试 MarkDown 功能&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Troubleshoot Installing Nokorigi</title>
    <link href="http://wongzigii.github.io/2016/01/05/Troubleshoot-for-installing-Nokorigi/"/>
    <id>http://wongzigii.github.io/2016/01/05/Troubleshoot-for-installing-Nokorigi/</id>
    <published>2016-01-05T10:37:14.000Z</published>
    <updated>2019-05-30T04:56:27.228Z</updated>
    
    <content type="html"><![CDATA[<p>Troubleshoot installing Nokorigi for the dependency of rails.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">  ERROR: Error installing rails:</span><br><span class="line">  ERROR: Failed to build gem native extension.</span><br><span class="line">  current directory: /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/ext/nokogiri</span><br><span class="line">  /Users/Wongzigii/.rvm/rubies/ruby-2.3.0/bin/ruby -r ./siteconf20160105-5281-1xpczbo.rb extconf.rb</span><br><span class="line">  checking <span class="keyword">if</span> the C compiler accepts ... yes</span><br><span class="line">  checking <span class="keyword">if</span> the C compiler accepts -Wno-error=unused-command-line-argument-hard-error-in-future... no</span><br><span class="line">  Building nokogiri using packaged libraries.</span><br><span class="line">  Using mini_portile version 2.0.0</span><br><span class="line">  checking <span class="keyword">for</span> iconv.h... yes</span><br><span class="line">  checking <span class="keyword">for</span> gzdopen() <span class="keyword">in</span> -lz... yes</span><br><span class="line">  checking <span class="keyword">for</span> iconv using --with-opt-* flags... yes</span><br><span class="line">  ************************************************************************</span><br><span class="line">  IMPORTANT NOTICE:</span><br><span class="line">Building Nokogiri with a packaged version of libxml2-2.9.2</span><br><span class="line">with the following patches applied:</span><br><span class="line">- 0001-Revert-Missing-initialization-for-the-catalog-module.patch</span><br><span class="line">- 0002-Fix-missing-entities-after-CVE-2014-3660-fix.patch</span><br><span class="line">- 0003-Stop-parsing-on-entities-boundaries-errors.patch</span><br><span class="line">- 0004-Cleanup-conditional-section-error-handling.patch</span><br><span class="line">- 0005-CVE-2015-1819-Enforce-the-reader-to-run-in-constant-.patch</span><br><span class="line">- 0006-Another-variation-of-overflow-in-Conditional-section.patch</span><br><span class="line">- 0007-Fix-an-error-in-previous-Conditional-section-patch.patch</span><br><span class="line">- 0008-CVE-2015-8035-Fix-XZ-compression-support-loop.patch</span><br><span class="line">- 0009-Updated-config.guess.patch</span><br><span class="line">- 0010-Fix-parsering-short-unclosed-comment-uninitialized-access.patch</span><br><span class="line">- 0011-Avoid-extra-processing-of-MarkupDecl-when-EOF.patch</span><br><span class="line">- 0012-Avoid-processing-entities-after-encoding-conversion-.patch</span><br><span class="line">- 0013-CVE-2015-7497-Avoid-an-heap-buffer-overflow-in-xmlDi.patch</span><br><span class="line">- 0014-CVE-2015-5312-Another-entity-expansion-issue.patch</span><br><span class="line">- 0015-Add-xmlHaltParser-to-stop-the-parser.patch</span><br><span class="line">- 0016-Detect-incoherency-on-GROW.patch</span><br><span class="line">- 0017-CVE-2015-7500-Fix-memory-access-error-due-to-incorre.patch</span><br><span class="line">- 0018-CVE-2015-8242-Buffer-overead-with-HTML-parser-in-pus.patch</span><br><span class="line"></span><br><span class="line">Team Nokogiri will keep on doing their best to provide security</span><br><span class="line">updates <span class="keyword">in</span> a timely manner, but <span class="keyword">if</span> this is a concern <span class="keyword">for</span> you and want</span><br><span class="line">to use the system library instead; abort this installation process and</span><br><span class="line">reinstall nokogiri as follows:</span><br><span class="line"></span><br><span class="line">   gem install nokogiri -- --use-system-libraries</span><br><span class="line">       [--with-xml2-config=/path/to/xml2-config]</span><br><span class="line">       [--with-xslt-config=/path/to/xslt-config]</span><br><span class="line"></span><br><span class="line">If you are using Bundler, tell it to use the option:</span><br><span class="line"></span><br><span class="line">   bundle config build.nokogiri --use-system-libraries</span><br><span class="line">   bundle install</span><br><span class="line"></span><br><span class="line">Note, however, that nokogiri is not fully compatible with arbitrary</span><br><span class="line">versions of libxml2 provided by OS/package vendors.</span><br><span class="line">************************************************************************</span><br><span class="line">Extracting libxml2-2.9.2.tar.gz into tmp/x86_64-apple-darwin15.2.0/ports/libxml2/2.9.2... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0001-Revert-Missing-initialization-for-the-catalog-module.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0002-Fix-missing-entities-after-CVE-2014-3660-fix.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0003-Stop-parsing-on-entities-boundaries-errors.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0004-Cleanup-conditional-section-error-handling.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0005-CVE-2015-1819-Enforce-the-reader-to-run-in-constant-.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0006-Another-variation-of-overflow-in-Conditional-section.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0007-Fix-an-error-in-previous-Conditional-section-patch.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0008-CVE-2015-8035-Fix-XZ-compression-support-loop.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0009-Updated-config.guess.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0010-Fix-parsering-short-unclosed-comment-uninitialized-access.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0011-Avoid-extra-processing-of-MarkupDecl-when-EOF.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0012-Avoid-processing-entities-after-encoding-conversion-.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0013-CVE-2015-7497-Avoid-an-heap-buffer-overflow-in-xmlDi.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0014-CVE-2015-5312-Another-entity-expansion-issue.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0015-Add-xmlHaltParser-to-stop-the-parser.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0016-Detect-incoherency-on-GROW.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0017-CVE-2015-7500-Fix-memory-access-error-due-to-incorre.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxml2/0018-CVE-2015-8242-Buffer-overead-with-HTML-parser-in-pus.patch... OK</span><br><span class="line">Running <span class="string">'configure'</span> <span class="keyword">for</span> libxml2 2.9.2... OK</span><br><span class="line">Running <span class="string">'compile'</span> <span class="keyword">for</span> libxml2 2.9.2... OK</span><br><span class="line">Running <span class="string">'install'</span> <span class="keyword">for</span> libxml2 2.9.2... OK</span><br><span class="line">Activating libxml2 2.9.2 (from /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/ports/x86_64-apple-darwin15.2.0/libxml2/2.9.2)...</span><br><span class="line">************************************************************************</span><br><span class="line">IMPORTANT NOTICE:</span><br><span class="line"></span><br><span class="line">Building Nokogiri with a packaged version of libxslt-1.1.28</span><br><span class="line">with the following patches applied:</span><br><span class="line">- 0001-Adding-doc-update-related-to-1.1.28.patch</span><br><span class="line">- 0002-Fix<span class="_">-a</span>-couple-of-places-where<span class="_">-f</span>-printf-parameters-wer.patch</span><br><span class="line">- 0003-Initialize-pseudo-random-number-generator-with-curre.patch</span><br><span class="line">- 0004-EXSLT-function-str-replace-is-broken-as-is.patch</span><br><span class="line">- 0006-Fix-str-padding-to-work-with-UTF-8-strings.patch</span><br><span class="line">- 0007-Separate-function-for-predicate-matching-in-patterns.patch</span><br><span class="line">- 0008-Fix-direct-pattern-matching.patch</span><br><span class="line">- 0009-Fix-certain-patterns-with-predicates.patch</span><br><span class="line">- 0010-Fix-handling-of-UTF-8-strings-in-EXSLT-crypto-module.patch</span><br><span class="line">- 0013-Memory-leak-in-xsltCompileIdKeyPattern-error-path.patch</span><br><span class="line">- 0014-Fix-for-bug-436589.patch</span><br><span class="line">- 0015-Fix-mkdir-for-mingw.patch</span><br><span class="line">- 0016-Fix-for-type-confusion-in-preprocessing-attributes.patch</span><br><span class="line">- 0017-Updated-config.guess.patch</span><br><span class="line"></span><br><span class="line">Team Nokogiri will keep on doing their best to provide security</span><br><span class="line">updates <span class="keyword">in</span> a timely manner, but <span class="keyword">if</span> this is a concern <span class="keyword">for</span> you and want</span><br><span class="line">to use the system library instead; abort this installation process and</span><br><span class="line">reinstall nokogiri as follows:</span><br><span class="line"></span><br><span class="line">   gem install nokogiri -- --use-system-libraries</span><br><span class="line">       [--with-xml2-config=/path/to/xml2-config]</span><br><span class="line">       [--with-xslt-config=/path/to/xslt-config]</span><br><span class="line"></span><br><span class="line">If you are using Bundler, tell it to use the option:</span><br><span class="line"></span><br><span class="line">   bundle config build.nokogiri --use-system-libraries</span><br><span class="line">   bundle install</span><br><span class="line">************************************************************************</span><br><span class="line">Extracting libxslt-1.1.28.tar.gz into tmp/x86_64-apple-darwin15.2.0/ports/libxslt/1.1.28... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0001-Adding-doc-update-related-to-1.1.28.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0002-Fix<span class="_">-a</span>-couple-of-places-where<span class="_">-f</span>-printf-parameters-wer.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0003-Initialize-pseudo-random-number-generator-with-curre.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0004-EXSLT-function-str-replace-is-broken-as-is.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0006-Fix-str-padding-to-work-with-UTF-8-strings.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0007-Separate-function-for-predicate-matching-in-patterns.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0008-Fix-direct-pattern-matching.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0009-Fix-certain-patterns-with-predicates.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0010-Fix-handling-of-UTF-8-strings-in-EXSLT-crypto-module.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0013-Memory-leak-in-xsltCompileIdKeyPattern-error-path.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0014-Fix-for-bug-436589.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0015-Fix-mkdir-for-mingw.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0016-Fix-for-type-confusion-in-preprocessing-attributes.patch... OK</span><br><span class="line">Running git apply with /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/patches/libxslt/0017-Updated-config.guess.patch... OK</span><br><span class="line">Running <span class="string">'configure'</span> <span class="keyword">for</span> libxslt 1.1.28... ERROR, review <span class="string">'/Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1/ext/nokogiri/tmp/x86_64-apple-darwin15.2.0/ports/libxslt/1.1.28/configure.log'</span> to see what happened. Last lines are:</span><br><span class="line">========================================================================</span><br><span class="line"> Darwin Kernel Version 15.2.0: Fri Nov 13 19:56:56 PST 2015; root:xnu-3248.20.55~2/RELEASE_X86_64</span><br><span class="line">Kernel configured <span class="keyword">for</span> up to 8 processors.</span><br><span class="line">4 processors are physically available.</span><br><span class="line">8 processors are logically available.</span><br><span class="line">Processor <span class="built_in">type</span>: x86_64h (Intel x86-64h Haswell)</span><br><span class="line">Processors active: 0 1 2 3 4 5 6 7</span><br><span class="line">Primary memory available: 16.00 gigabytes</span><br><span class="line">Default processor <span class="built_in">set</span>: 376 tasks, 1947 threads, 8 processors</span><br><span class="line">Load average: 1.84, Mach factor: 6.14</span><br><span class="line">/bin/universe          =</span><br><span class="line">/usr/bin/arch -k       =</span><br><span class="line">/bin/arch              =</span><br><span class="line">/usr/bin/oslevel       =</span><br><span class="line">/usr/convex/getsysinfo =</span><br><span class="line"></span><br><span class="line">UNAME_MACHINE = x86_64</span><br><span class="line">UNAME_RELEASE = 15.2.0</span><br><span class="line">UNAME_SYSTEM  = Darwin</span><br><span class="line">UNAME_VERSION = Darwin Kernel Version 15.2.0: Fri Nov 13 19:56:56 PST 2015; root:xnu-3248.20.55~2/RELEASE_X86_64</span><br><span class="line">configure: error: cannot guess build <span class="built_in">type</span>; you must specify one</span><br><span class="line">========================================================================</span><br><span class="line">*** extconf.rb failed ***</span><br><span class="line">Could not create Makefile due to some reason, probably lack of necessary</span><br><span class="line">libraries and/or headers.  Check the mkmf.log file <span class="keyword">for</span> more details.  You may</span><br><span class="line">need configuration options.</span><br><span class="line"></span><br><span class="line">Provided configuration options:</span><br><span class="line">--with-opt-dir</span><br><span class="line">--with-opt-include</span><br><span class="line">--without-opt-include=<span class="variable">$&#123;opt-dir&#125;</span>/include</span><br><span class="line">--with-opt-lib</span><br><span class="line">--without-opt-lib=<span class="variable">$&#123;opt-dir&#125;</span>/lib</span><br><span class="line">--with-make-prog</span><br><span class="line">--without-make-prog</span><br><span class="line">--srcdir=.</span><br><span class="line">--curdir</span><br><span class="line">--ruby=/Users/Wongzigii/.rvm/rubies/ruby-2.3.0/bin/$(RUBY_BASE_NAME)</span><br><span class="line">--<span class="built_in">help</span></span><br><span class="line">--clean</span><br><span class="line">--use-system-libraries</span><br><span class="line">--<span class="built_in">enable</span>-static</span><br><span class="line">--<span class="built_in">disable</span>-static</span><br><span class="line">--with-zlib-dir</span><br><span class="line">--without-zlib-dir</span><br><span class="line">--with-zlib-include</span><br><span class="line">--without-zlib-include=<span class="variable">$&#123;zlib-dir&#125;</span>/include</span><br><span class="line">--with-zlib-lib</span><br><span class="line">--without-zlib-lib=<span class="variable">$&#123;zlib-dir&#125;</span>/lib</span><br><span class="line">--<span class="built_in">enable</span>-cross-build</span><br><span class="line">--<span class="built_in">disable</span>-cross-build</span><br><span class="line">/Users/Wongzigii/.rvm/rubies/ruby-2.3.0/lib/ruby/gems/2.3.0/gems/mini_portile2-2.0.0/lib/mini_portile2/mini_portile.rb:366:<span class="keyword">in</span> `block <span class="keyword">in</span> execute<span class="string">': Failed to complete configure task (RuntimeError)</span></span><br><span class="line"><span class="string">from /Users/Wongzigii/.rvm/rubies/ruby-2.3.0/lib/ruby/gems/2.3.0/gems/mini_portile2-2.0.0/lib/mini_portile2/mini_portile.rb:337:in `chdir'</span></span><br><span class="line">from /Users/Wongzigii/.rvm/rubies/ruby-2.3.0/lib/ruby/gems/2.3.0/gems/mini_portile2-2.0.0/lib/mini_portile2/mini_portile.rb:337:<span class="keyword">in</span> `execute<span class="string">'</span></span><br><span class="line"><span class="string">from /Users/Wongzigii/.rvm/rubies/ruby-2.3.0/lib/ruby/gems/2.3.0/gems/mini_portile2-2.0.0/lib/mini_portile2/mini_portile.rb:106:in `configure'</span></span><br><span class="line">from /Users/Wongzigii/.rvm/rubies/ruby-2.3.0/lib/ruby/gems/2.3.0/gems/mini_portile2-2.0.0/lib/mini_portile2/mini_portile.rb:149:<span class="keyword">in</span> `cook<span class="string">'</span></span><br><span class="line"><span class="string">from extconf.rb:289:in `block (2 levels) in process_recipe'</span></span><br><span class="line">from extconf.rb:182:<span class="keyword">in</span> `block <span class="keyword">in</span> chdir_for_build<span class="string">'</span></span><br><span class="line"><span class="string">from extconf.rb:181:in `chdir'</span></span><br><span class="line">from extconf.rb:181:<span class="keyword">in</span> `chdir_for_build<span class="string">'</span></span><br><span class="line"><span class="string">from extconf.rb:288:in `block in process_recipe'</span></span><br><span class="line">from extconf.rb:187:<span class="keyword">in</span> `tap<span class="string">'</span></span><br><span class="line"><span class="string">from extconf.rb:187:in `process_recipe'</span></span><br><span class="line">from extconf.rb:490:<span class="keyword">in</span> `&lt;main&gt;<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To see why this extension failed to compile, please check the mkmf.log which can be found here:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 	/Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/extensions/x86_64-darwin-15/2.3.0/nokogiri-1.6.7.1/mkmf.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">extconf failed, exit code 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gem files will remain installed in /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/gems/nokogiri-1.6.7.1 for inspection.</span></span><br><span class="line"><span class="string">Results logged to /Users/Wongzigii/.rvm/gems/ruby-2.3.0@rails4.2/extensions/x86_64-darwin-15/2.3.0/nokogiri-1.6.7.1/gem_make.out</span></span><br></pre></td></tr></table></figure>
<p><strong>The Problem:</strong></p>
<blockquote>
<p>For some reason Apple’s Yosemite version of OSX does not have a system accessible installation of libxml2.  Nokogiri requires this in order to compile and luckily Xcode has a version of libxml2 bundled with it — we just need to specify it when installing the gem.  It’s important to get Nokogiri installed correctly because as of right now Rails 4.2.1.rc4 automatically attempts to install it and you will feel pain.</p>
</blockquote>
<p><strong>Solved:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install nokogiri -- --use-system-libraries=<span class="literal">true</span> --with-xml2-include=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/libxml2/</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Troubleshoot installing Nokorigi for the dependency of rails.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
    
    </summary>
    
    
      <category term="ruby" scheme="http://wongzigii.github.io/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>SegmentFault Hackathon 2015</title>
    <link href="http://wongzigii.github.io/2015/10/25/SegmentFault-Hackathon-2015/"/>
    <id>http://wongzigii.github.io/2015/10/25/SegmentFault-Hackathon-2015/</id>
    <published>2015-10-25T02:28:05.000Z</published>
    <updated>2019-05-30T04:07:13.519Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/8c7526ebgw1f84si74w9rj20qo0zkgnp.jpg" alt></p>
<p><img src="http://ww2.sinaimg.cn/large/8c7526ebgw1f84silnr74j20zk0qo77e.jpg" alt></p>
<p><img src="http://ww4.sinaimg.cn/large/8c7526ebgw1f84sjaxrkvj20zk0qo0w8.jpg" alt></p>
<p><img src="http://ww3.sinaimg.cn/large/8c7526ebgw1f84sjtvbpsj20qo0zkmzt.jpg" alt></p>
<p>Hack never stop!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8c7526ebgw1f84si74w9rj20qo0zkgnp.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8c7526ebgw1
    
    </summary>
    
    
      <category term="Hackathon" scheme="http://wongzigii.github.io/tags/Hackathon/"/>
    
  </entry>
  
  <entry>
    <title>A Simple Makefile Tutorial</title>
    <link href="http://wongzigii.github.io/2015/05/29/A-simple-Makefile-Tutorial/"/>
    <id>http://wongzigii.github.io/2015/05/29/A-simple-Makefile-Tutorial/</id>
    <published>2015-05-29T14:57:19.000Z</published>
    <updated>2019-05-30T04:55:23.357Z</updated>
    
    <content type="html"><![CDATA[<p>Makefile is a simple way to organize code compilation. This tutorial does not even scratch the surface of what is possible using make, but is intended as a starters guide so that you can quickly and easily create your own makefiles for small to medium-sized projects.</p>
<p>Let’s start with the following three files, <code>hellomake.c</code>, <code>hellofunc.c</code>, and <code>hellomake.h</code>, which would represent a typical main program, some functional code in a separate file, and an include file, respectively.</p>
<h2 id="hellomake-c"><a href="#hellomake-c" class="headerlink" title="hellomake.c"></a>hellomake.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hellomake.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// call a function in another file</span></span><br><span class="line">  myPrintHelloMake();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="hellofunc-c"><a href="#hellofunc-c" class="headerlink" title="hellofunc.c"></a>hellofunc.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hellomake.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintHelloMake</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello makefiles!\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="hellomake-h"><a href="#hellomake-h" class="headerlink" title="hellomake.h"></a>hellomake.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">example include file</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintHelloMake</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Normally, you would compile this collection of code by executing the following command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hellomake hellomake.c hellofunc.c -I</span><br></pre></td></tr></table></figure>
<p>This compiles the two <code>.c</code> files and names the executable hellomake. The -I. is included so that gcc will look in the current directory (.) for the include file <code>hellomake.h</code>. Without a makefile, the typical approach to the test/modify/debug cycle is to use the up arrow in a terminal to go back to your last compile command so you don’t have to type it each time, especially once you’ve added a few more <code>.c</code> files to the mix.</p>
<p>Unfortunately, this approach to compilation has two downfalls. First, if you lose the compile command or switch computers you have to retype it from scratch, which is inefficient at best. Second, if you are only making changes to one <code>.c</code> file, recompiling all of them every time is also time-consuming and inefficient. So, it’s time to see what we can do with a makefile.</p>
<p>The simplest makefile you could create would look something like:</p>
<h2 id="Makefile-1"><a href="#Makefile-1" class="headerlink" title="Makefile 1"></a>Makefile 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hellomake: hellomake.c hellofunc.c</span><br><span class="line">     gcc -o hellomake hellomake.c hellofunc.c -I.</span><br></pre></td></tr></table></figure>
<p>If you put this rule into a file called Makefile or makefile and then type make on the command line it will execute the compile command as you have written it in the makefile. Note that make with no arguments executes the first rule in the file. Furthermore, by putting the list of files on which the command depends on the first line after the <code>:</code>, make knows that the rule hellomake needs to be executed if any of those files change. Immediately, you have solved problem #1 and can avoid using the up arrow repeatedly, looking for your last compile command. However, the system is still not being efficient in terms of compiling only the latest changes.</p>
<p>One very important thing to note is that there is a tab before the gcc command in the makefile. There must be a tab at the beginning of any command, and make will not be happy if it’s not there.</p>
<p>In order to be a bit more efficient, let’s try the following:</p>
<h2 id="Makefile-2"><a href="#Makefile-2" class="headerlink" title="Makefile 2"></a>Makefile 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I.</span><br><span class="line"></span><br><span class="line">hellomake: hellomake.o hellofunc.o</span><br><span class="line">     $(CC) -o hellomake hellomake.o hellofunc.o -I.</span><br></pre></td></tr></table></figure>
<p>So now we’ve defined some constants <code>CC</code> and <code>CFLAGS</code>. It turns out these are special constants that communicate to make how we want to compile the files <code>hellomake.c</code> and <code>hellofunc.c</code>. In particular, the macro <code>CC</code> is the C compiler to use, and <code>CFLAGS</code> is the list of flags to pass to the compilation command. By putting the object <code>files--hellomake.o</code> and <code>hellofunc.o</code> in the dependency list and in the rule, make knows it must first compile the <code>.c</code> versions individually, and then build the executable <code>hellomake</code>.</p>
<p>Using this form of makefile is sufficient for most small scale projects. However, there is one thing missing: dependency on the include files. If you were to make a change to <code>hellomake.h</code>, for example, make would not recompile the <code>.c</code> files, even though they needed to be. In order to fix this, we need to tell make that all <code>.c</code> files depend on certain <code>.h</code> files. We can do this by writing a simple rule and adding it to the makefile.</p>
<h2 id="Makefile-3"><a href="#Makefile-3" class="headerlink" title="Makefile 3"></a>Makefile 3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I.</span><br><span class="line">DEPS = hellomake.h</span><br><span class="line"></span><br><span class="line">%.o: %.c $(DEPS)</span><br><span class="line">	$(CC) -c -o $@ $&lt; $(CFLAGS)</span><br><span class="line"></span><br><span class="line">hellomake: hellomake.o hellofunc.o </span><br><span class="line">	gcc -o hellomake hellomake.o hellofunc.o -I.</span><br></pre></td></tr></table></figure>
<p>This addition first creates the macro <code>DEPS</code>, which is the set of <code>.h</code> files on which the <code>.c</code> files depend. Then we define a rule that applies to all files ending in the <code>.o</code> suffix. The rule says that the <code>.o</code> file depends upon the <code>.c</code> version of the file and the <code>.h</code> files included in the <code>DEPS</code> macro. The rule then says that to generate the <code>.o</code> file, make needs to compile the <code>.c</code> file using the compiler defined in the <code>CC</code> macro. The <code>-c</code> flag says to generate the object file, the <code>-o $@</code> says to put the output of the compilation in the file named on the left side of the <code>:</code>, the <code>$&lt;</code> is the first item in the dependencies list, and the <code>CFLAGS</code> macro is defined as above.</p>
<p>As a final simplification, let’s use the special macros <code>$@</code> and <code>$^</code>, which are the left and right sides of the <code>:</code>, respectively, to make the overall compilation rule more general. In the example below, all of the include files should be listed as part of the macro <code>DEPS</code>, and all of the object files should be listed as part of the macro <code>OBJ</code>.</p>
<h2 id="Makefile-4"><a href="#Makefile-4" class="headerlink" title="Makefile 4"></a>Makefile 4</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I.</span><br><span class="line">DEPS = hellomake.h</span><br><span class="line">OBJ = hellomake.o hellofunc.o </span><br><span class="line"></span><br><span class="line">%.o: %.c $(DEPS)</span><br><span class="line">	$(CC) -c -o $@ $&lt; $(CFLAGS)</span><br><span class="line"></span><br><span class="line">hellomake: $(OBJ)</span><br><span class="line">	gcc -o $@ $^ $(CFLAGS)</span><br></pre></td></tr></table></figure>
<p>So what if we want to start putting our <code>.h</code> files in an include directory, our source code in a src directory, and some local libraries in a lib directory? Also, can we somehow hide those annoying <code>.o</code> files that hang around all over the place? The answer, of course, is yes. The following makefile defines paths to the include and lib directories, and places the object files in an obj subdirectory within the src directory. It also has a macro defined for any libraries you want to include, such as the math library -lm. This makefile should be located in the <code>src</code> directory. Note that it also includes a rule for cleaning up your source and object directories if you type <code>make clean</code>. The <code>.PHONY</code> rule keeps make from doing something with a file named clean.</p>
<h2 id="Makefile-5"><a href="#Makefile-5" class="headerlink" title="Makefile 5"></a>Makefile 5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">IDIR =../include</span><br><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I$(IDIR)</span><br><span class="line"></span><br><span class="line">ODIR=obj</span><br><span class="line">LDIR =../lib</span><br><span class="line"></span><br><span class="line">LIBS=-lm</span><br><span class="line"></span><br><span class="line">_DEPS = hellomake.h</span><br><span class="line">DEPS = $(patsubst %,$(IDIR)/%,$(_DEPS))</span><br><span class="line"></span><br><span class="line">_OBJ = hellomake.o hellofunc.o </span><br><span class="line">OBJ = $(patsubst %,$(ODIR)/%,$(_OBJ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(ODIR)/%.o: %.c $(DEPS)</span><br><span class="line">	$(CC) -c -o $@ $&lt; $(CFLAGS)</span><br><span class="line"></span><br><span class="line">hellomake: $(OBJ)</span><br><span class="line">	gcc -o $@ $^ $(CFLAGS) $(LIBS)</span><br><span class="line"></span><br><span class="line">.PHONY: clean</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	rm -f $(ODIR)/*.o *~ core $(INCDIR)/*~</span><br></pre></td></tr></table></figure>
<p>So now you have a perfectly good makefile that you can modify to manage small and medium-sized software projects. You can add multiple rules to a makefile; you can even create rules that call other rules. For more information on makefiles and the <code>make</code> function, check out the <a href="http://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">GNU Make Manual</a>, which will tell you more than you ever wanted to know (really).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Makefile is a simple way to organize code compilation. This tutorial does not even scratch the surface of what is possible using make, bu
    
    </summary>
    
    
      <category term="makefile" scheme="http://wongzigii.github.io/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>MetaClass</title>
    <link href="http://wongzigii.github.io/2015/04/17/What-is-a-meta-class-in-Objective-C/"/>
    <id>http://wongzigii.github.io/2015/04/17/What-is-a-meta-class-in-Objective-C/</id>
    <published>2015-04-17T01:51:43.000Z</published>
    <updated>2019-05-30T04:07:13.522Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译整理自：<a href="http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html" target="_blank" rel="noopener">From Cocoa with Love</a></p>
<p>在这篇文章中，我们会看到一个在 Objective-C 中很陌生的概念 – meta-class。Objective-C 里面每个类都有它自己的 meta-class，但是你很少会注意到你使用了它。我们在开头会学习怎样在 runtime 创建一个类，通过创建的 “class pair”，我会解释什么是 meta-class，然后深入研究它对于 Objective-C 中对象和类的意义。</p>
<h3 id="在-Runtime-创建一个类"><a href="#在-Runtime-创建一个类" class="headerlink" title="在 Runtime 创建一个类"></a>在 Runtime 创建一个类</h3><p>下面的代码会在 runtime 创建一个 <code>NSError</code> 的子类，并在其中增加一个方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class newClass =</span><br><span class="line">    objc_allocateClassPair([<span class="built_in">NSError</span> <span class="keyword">class</span>], <span class="string">"RuntimeErrorSubclass"</span>, <span class="number">0</span>);</span><br><span class="line">class_addMethod(newClass, <span class="keyword">@selector</span>(report), (IMP)ReportFunction, <span class="string">"v@:"</span>);</span><br><span class="line">objc_registerClassPair(newClass);</span><br></pre></td></tr></table></figure>
<p>这个方法使用一个叫 <code>ReportFunction</code> 的函数作为它的实现，它的定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ReportFunction(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"This object is %p."</span>, <span class="keyword">self</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Class is %@, and super is %@."</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], [<span class="keyword">self</span> superclass]);</span><br><span class="line"> </span><br><span class="line">    Class currentClass = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Following the isa pointer %d times gives %p"</span>, i, currentClass);</span><br><span class="line">        currentClass = object_getClass(currentClass);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"NSObject's class is %p"</span>, [<span class="built_in">NSObject</span> <span class="keyword">class</span>]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"NSObject's meta class is %p"</span>, object_getClass([<span class="built_in">NSObject</span> <span class="keyword">class</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表面上看这些都很简单。在 runtime 创建一个类只需三个步骤：</p>
<ol>
<li>为 <code>class pair</code> 开辟内存，（使用 objc_allocateClassPair）。</li>
<li>添加方法或成员变量到这个类中（通过 class_addMethod 增加一个方法）。</li>
<li>注册这个类，以便它能使用(使用 objc_registerClassPair)。</li>
</ol>
<p>然而，有一个很关键的问题是：<code>class pair</code> 是什么东西？<code>objc_allocateClassPair</code> 函数只返回一个值：the class。那另外一半呢？</p>
<p>我相信你已经猜到了，另一半就是 meta-class，在解释这个东西是什么和你为什么需要这个东西之前，还需要先了解一下对象和类的背景知识。</p>
<h3 id="怎么样的数据类型才能成为对象？"><a href="#怎么样的数据类型才能成为对象？" class="headerlink" title="怎么样的数据类型才能成为对象？"></a>怎么样的数据类型才能成为对象？</h3><p>每个对象都有它自己的类。这是面向对象的基本概念，但是在 Objective-C 中，数据结构都有它自己的类。含有一个指针且该指针可以正确指向类的数据结构，都可以称为对象。</p>
<p>在 Objective-C 中，对象的类是由一个叫 <code>isa</code> 的指针决定的，<code>isa</code> 指针指向对象所属的类（Class）。</p>
<blockquote>
<p>译者注：实际上在 Runtime 这篇文章中我们已经一窥 Objective-C 中最基本的定义：</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object &#123;</span><br><span class="line">    Class isa;</span><br><span class="line">&#125; *<span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>
<p>所有以指针开始并指向 Class 结构体的数据结构都可以看成是 <code>objc_object</code>。</p>
<p>而对象在 Objective-C 中最重要的特点就是你可以发送消息给它们：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">@"stringValue"</span></span><br><span class="line">    writeToFile:<span class="string">@"/file.txt"</span> atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>];</span><br></pre></td></tr></table></figure>
<p>你向对象发送一个消息，runtime 会顺着对象的 isa 指针来获得对象所属的 Class。这个 Class 包含了很多定义的的 Method，还包含一个指向 superclass 的指针，来寻找继承自父类的方法。当你发送消息的时候，首先，runtime 会在所属 Class 的 Method 中查找方法，如果找不到，就会去 superclass 中查找父类的方法。如果找到了，runtime 会根据这个方法调用实现函数（IMP）。</p>
<h3 id="什么是-meta-class？"><a href="#什么是-meta-class？" class="headerlink" title="什么是 meta-class？"></a>什么是 meta-class？</h3><p>现在，正如你所了解那样，一个 Class 在 Objective-C 中也算一个对象。这意味着你可以向 Class 发送消息。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSStringEncoding</span> defaultStringEncoding = [<span class="built_in">NSString</span> defaultStringEncoding];</span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>defaultStringEncoding</code> 类方法被发送到 <code>NSString</code> 类。</p>
<p>由于 Objective-C 里所有 Class 都是一个对象，因此，Class 结构体的第一项必须是一个指向 isa 的指针，从而符合上面 objc_object 结构体的定义，而第二项必须是一个指向 superclass （或者 nil，对于基本的类）的指针。</p>
<p>一个 Class 的定义会因你所使用的 runtime 的版本而异，但有一点不变的是，它们第一项都是一个 isa 指针，然后紧接着是 superclass 指针。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</span><br><span class="line"><span class="keyword">struct</span> objc_class &#123;</span><br><span class="line">    Class isa;</span><br><span class="line">    Class super_class;</span><br><span class="line">    <span class="comment">/* followed by runtime specific details... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>为了调用 Class 里的方法（这里指的是类方法），isa 指针必须指向一个 Class 结构体，这个 Class 结构体必须包含那些我们可以调用的方法列表。</p>
<blockquote>
<p>注：这就像上面提到过的，对象为了调用 Class 里的实例方法，Class 里必须包含这些自定义的方法，只不过这里不是对象，而是 Class，因为 Class 也是一个对象</p>
</blockquote>
<p>这就要引入一个关于 meta-class 的概念：meta-class 是一个 Class 对象的类。</p>
<p>简单说就是：</p>
<ul>
<li>当你向对象发送消息，是在这个对象的类的方法列表中寻找。（实例方法）</li>
<li>当你向类（Class）发送消息，是在这个 Class 的 meta-class 的方法列表中寻找。（类方法）</li>
</ul>
<p>meta-class 是必不可少的，因为它储存了这个类的类方法。由于每个类都有独一无二的类方法，所以每个类都有独一无二的 meta-class。</p>
<h3 id="meta-class-的类是什么"><a href="#meta-class-的类是什么" class="headerlink" title="meta-class 的类是什么?"></a>meta-class 的类是什么?</h3><p>meta-class，像前面的 Class，也是一个对象。这意味着你也可以向它发送消息。同样，它也必须要有一个类。</p>
<p>所有的 meta-class 使用 NSObject 的 meta-class 作为它的类，因此 isa 指针都指向 NSObject 的 meta-class。那 NSObject 的 meta-class 的 isa 指针指向哪呢？ 它自己。</p>
<p>说的更拗口一点就是，根元类把它自己的基类设置成了super_class。</p>
<p>在这样的继承体系下，所有实例、类以及元类（meta class）都继承自一个基类。</p>
<p>这意味着对于继承于 NSObject 的所有实例、类和元类，他们可以使用 NSObject 的所有实例方法，类和元类可以使用 NSObject 的所有类方法。</p>
<p><img src="http://ww4.sinaimg.cn/large/8c7526ebgw1f84s9nt6pzj21fv1ia45g.jpg" alt></p>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>为了验证，让我们看看我在文章开始写的 ReportFunction 函数的输出。这个函数的目的是跟随 isa 指针并打印出它的路径。</p>
<p>为了运行 ReportFunction，我们需要创建一个动态实例来创建类调用 report 方法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> instanceOfNewClass =</span><br><span class="line">    [[newClass alloc] initWithDomain:<span class="string">@"someDomain"</span> code:<span class="number">0</span> userInfo:<span class="literal">nil</span>];</span><br><span class="line">[instanceOfNewClass performSelector:<span class="keyword">@selector</span>(report)];</span><br><span class="line">[instanceOfNewClass release];</span><br></pre></td></tr></table></figure>
<p>这里没有声明 report 方法，但我使用 performSelector: 调用它，所以编译器不会给出警告。<br>然后 ReportFunction 函数会沿着 isa 进行检索，来告诉我们 class，meta-class 以及meta-class 的 class 是什么样的情况：</p>
<blockquote>
<p>如何获取对象的类：在文章的开头部分，ReportFunction 函数通过 object_getClass 方法来跟踪 isa 指针，因为 isa 指针是类的保护成员（你不能直接接收其他对象的 isa 指针）。ReportFunction 不使用类方法，因为在类对象里调用类方法不能返回元类，它会再次返回这个类（因此 [NSString class] 会返回 NSString 类而不是 NSString 的 meta-class）。</p>
</blockquote>
<p>输出（省略了 NSLog 前缀）：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">This object is <span class="number">0x10010c810</span>.</span><br><span class="line">Class is RuntimeErrorSubclass, and <span class="keyword">super</span> is <span class="built_in">NSError</span>.</span><br><span class="line">Following the isa pointer <span class="number">1</span> times gives <span class="number">0x10010c600</span></span><br><span class="line">Following the isa pointer <span class="number">2</span> times gives <span class="number">0x10010c630</span></span><br><span class="line">Following the isa pointer <span class="number">3</span> times gives <span class="number">0x7fff71038480</span></span><br><span class="line">Following the isa pointer <span class="number">4</span> times gives <span class="number">0x7fff71038480</span></span><br><span class="line">NSObject's class is 0x7fff710384a8</span><br><span class="line">NSObject's meta class is 0x7fff71038480</span><br></pre></td></tr></table></figure>
<p>观察 isa 经过的地址的值：</p>
<ul>
<li>对象的地址是 0x10010c810。</li>
<li>类的地址是 0x10010c600。</li>
<li>元类的地址是 0x10010c630。</li>
<li>根元类（ NSObject 的元类）的地址是 0x7fff71038480。</li>
<li>NSObject 元类的类是它本身。</li>
</ul>
<p>这些地址的值并不重要，重要的是它们说明了文中讨论的从类到 meta-class 到 NSObject 的 meta-class 的整个流程。</p>
<h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>元类是 Class 对象的类。每个类都有自己独一无二的 meta-class（每个类都有自己独一无二的方法列表）。这意味着所有的类对象都不同。</p>
<p>元类总是会确保类对象和基类的所有实例和类方法。对于从 <code>NSObject</code> 继承下来的类，这意味着所有的 <code>NSObject</code> 实例和 <code>Protocol</code> 方法在所有的类（和 meta-class ）中都可以使用。</p>
<p>所有的 meta-class 使用基类的 meta-class 作为自己的基类，对于顶层基类的 meta-class 也是一样，只是它指向自己而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译整理自：&lt;a href=&quot;http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;From Cocoa w
    
    </summary>
    
    
      <category term="runtime" scheme="http://wongzigii.github.io/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>Hackers and Painters</title>
    <link href="http://wongzigii.github.io/2015/04/15/Hackers-and-Painters/"/>
    <id>http://wongzigii.github.io/2015/04/15/Hackers-and-Painters/</id>
    <published>2015-04-15T08:47:23.000Z</published>
    <updated>2019-05-30T04:07:13.517Z</updated>
    
    <content type="html"><![CDATA[<p>第三章 <em>What you can’t say</em> 写得非常精彩：</p>
<blockquote>
<p>小孩子的大脑就是我们所有”不能说的话”的一面反射镜。我们似乎认定，孩子的思想应当是光明纯洁的。为了保证孩子不受外界“不良”思想的影响，我们对那些思想进行消毒和屏蔽，把世界描述成光明的样子，向孩子们灌输，将他们的心灵塑造成我们想象中的样子。</p>
<p>小孩子说脏话就是一个很好的切入点，你可以从这个小小的侧面来思考这个问题。我的许多朋友现在都开始为人父母了。他们一个个都变得非常小心，不在孩子面前使用 「Fuck」, 「Shit」 这样的脏话，以免孩子学会这些词。但是，这些词是日常语言的一部分，成年人一天到晚都在用。所以，孩子从家长那里得到一个错误的印象，以为它们是没人用的。为什么家长要这样伪装呢？因为他们觉得孩子不应该知道成年人语言的所以内容，只需知道一部分适合儿童的词就行了。我们喜欢孩子们看上去天真无邪。</p>
</blockquote>
<p>接着注释里写着：</p>
<blockquote>
<p>很快，孩子就会从朋友那里知道这些词。但是他们明白，不能在大人面前使用，所以，没过多久，一切就变得有点像讽刺剧了。家长在外使用这些词，回家后就不用，孩子在外也使用这些词，回家后也不用。双方见面，就像演戏一样。</p>
</blockquote>
<p>通过对原型的设计，然后进行创作的编程过程，看起来有点像文学创作。</p>
<blockquote>
<p>著名散文家E.B.怀特说过，「最好的文字来自不停的修改」。所有优秀作家都知道这一点，它对软件开发也适用。设计一样东西，最重要的一点就是要经常“再设计”，编程尤其如此，再多的修改都不过分。</p>
</blockquote>
<p>周末愉快！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三章 &lt;em&gt;What you can’t say&lt;/em&gt; 写得非常精彩：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小孩子的大脑就是我们所有”不能说的话”的一面反射镜。我们似乎认定，孩子的思想应当是光明纯洁的。为了保证孩子不受外界“不良”思想的影响，我们对那些思想进行消
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Initialize vs. Load</title>
    <link href="http://wongzigii.github.io/2015/02/01/Initialize-vs.-Load/"/>
    <id>http://wongzigii.github.io/2015/02/01/Initialize-vs.-Load/</id>
    <published>2015-02-01T09:29:08.000Z</published>
    <updated>2019-05-30T04:28:06.912Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html" target="_blank" rel="noopener">NSObject Class Reference</a></p>
<p>在一个类被使用之前，我们可以利用这两个方法对类做一些预处理的工作。例如将这个类自动把自己的类名保存到一个数组中。</p>
<h2 id="void-initialize"><a href="#void-initialize" class="headerlink" title="+ (void) initialize"></a>+ (void) initialize</h2><blockquote>
<p>The runtime sends initialize to each class in a program exactly one time just before the class, or any class that inherits from it, is sent its first message from within the program. (Thus the method may never be invoked if the class is not used.) The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses.</p>
</blockquote>
<h2 id="void-load"><a href="#void-load" class="headerlink" title="+ (void) load"></a>+ (void) load</h2><blockquote>
<p>The load message is sent to classes and categories that are both dynamically loaded and statically linked, but only if the newly loaded class or category implements a method that can respond.</p>
<p>The order of initialization is as follows:</p>
<p>All initializers in any framework you link to.</p>
<p>All +load methods in your image.</p>
<p>All C++ static initializers and C/C++ <em>attribute</em> (constructor) functions in your image.&gt;<br>All initializers in frameworks that link to you.<br>In addition:</p>
<p>A class’s +load method is called after all of its superclasses’ +load methods.</p>
<p>A category +load method is called after the class’s own +load method.</p>
<p>In a custom implementation of load you can therefore safely message other unrelated classes from the same image, but any load methods implemented by those classes may not have run yet.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html
    
    </summary>
    
    
  </entry>
  
</feed>
